[
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-Class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-Class_Ex01.html",
    "title": "In-class Exercise 01: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\n[haven] (https://www.tidyverse.org/)\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-Class_Ex01.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex01/In-Class_Ex01.html#loading-r-packages",
    "title": "In-class Exercise 01: Now You See It!",
    "section": "",
    "text": "In this hands-on exercise, two R packages will be used. They are:\n\ntidyverse, and\n[haven] (https://www.tidyverse.org/)\n\nThe code chunk used is as follows:\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-Class_Ex01.html#importing-pisa-data",
    "href": "In-class_Ex/In-class_Ex01/In-Class_Ex01.html#importing-pisa-data",
    "title": "In-class Exercise 01: Now You See It!",
    "section": "Importing PISA data",
    "text": "Importing PISA data\nThe code chunk below uses read_sas() of haven to import PISA data into R environment.\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\n\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "The objective of this exercise is to analyse and enhance the charts generated by a peer using R packages in Take-home Exercise 1. The evaluation will focus on aspects of clarity and aesthetics. Subsequently, the original design will be reconstructed by applying data visualiation design principles and best practices, utilising ggplot2, its extensions, and tidyverse packages learnt in lesson 1 and 2.\nThe data that we will be using would be the 2022 Programme for International Student Assessment (PISA), which evaluates education systems globally by testing 15-year-old students in mathematics, reading and science. The Student Questionnaire can be downloaded here."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#setting-the-scene-for-this-exercise",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#setting-the-scene-for-this-exercise",
    "title": "Take-home Exercise 2",
    "section": "",
    "text": "The objective of this exercise is to analyse and enhance the charts generated by a peer using R packages in Take-home Exercise 1. The evaluation will focus on aspects of clarity and aesthetics. Subsequently, the original design will be reconstructed by applying data visualiation design principles and best practices, utilising ggplot2, its extensions, and tidyverse packages learnt in lesson 1 and 2.\nThe data that we will be using would be the 2022 Programme for International Student Assessment (PISA), which evaluates education systems globally by testing 15-year-old students in mathematics, reading and science. The Student Questionnaire can be downloaded here."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#loading-necessary-r-packages",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#loading-necessary-r-packages",
    "title": "Take-home Exercise 2",
    "section": "2.1 Loading Necessary R packages",
    "text": "2.1 Loading Necessary R packages\nWe will utilise the following packages:\n\nhaven: Facilitates the import and export of ‘SPSS,’ ‘Stata,’ and ‘SAS’ files.\ntidyverse: A collection of packages for data manipulation and visualisation, including dplyr, ggplot2 and others.\nggrepel: An R package used with ggplot2 to enhance the positioning of text labels in plots, ensuring they avoid overlapping with data points, for a more readable visualisation.\nPatchwork: An R package designed for creating composite figures using ggplot2.\nggthemes: An R package that offers additional themes, geoms and scales for ggplot2.\nhrbrthemes: An R package that provides themes and theme components for ggplot2 visualisations, mainly focusing on typography-centric design.\n\nThe code which loads the R packages:\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse, haven)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#import-dataset",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#import-dataset",
    "title": "Take-home Exercise 2",
    "section": "2.2 Import dataset",
    "text": "2.2 Import dataset\nOf course our next step involves importing the dataset. The following code snippet will outline the sequential steps we will undertake.\n\nstu_qqq &lt;- read_sas('data/cy08msp_stu_qqq.sas7bdat')\n\nSince we are focusing only in Singapore context, we will filter to only include Singapore.\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\nSave the filtered dataset as an RDS file to simplify subsequent data imports.\n\nwrite_rds(stu_qqq_SG, 'data/stu_qqq_SG.rds')\n\nRead the RDS file that has been exported.\n\nstu_qqq_SG &lt;- read_rds('data/stu_qqq_SG.rds')\n\nThis code will undergo pre-processing to select all the required variables in which we need to do further analysis on. A cleaner code have been compiled below.\n\n\n\n\n\n\nCode Explanation\n\n\n\nIn the R code below, we begin by selecting specific columns of interest from the dataset stu_qqq_SG. Following this, we will calculate the row means for math, science and reading scores, providing a more comprehensive measure of individual performance. The column names are then renamed to enhance clarity. Afterwards, a subset of columns is selected for focused analysis, which includes gender, socioeconomic status (escs), and educational level (school). Gender and school variables are recoded to more interpretable factors, replacing numeric codes with meaningful and easier to understand labels. The cleaned dataset, named stu_qqq_SG_2, is saved in an RDS file for future use. The RDS file is subsequently read back into the script.\n\n\n\n# Step 1: Select relevant columns\nstu_qqq_SG_1 &lt;- stu_qqq_SG %&gt;%\n  select(ST004D01T, EXPECEDU, PV1MATH, PV2MATH, PV3MATH, PV4MATH, PV5MATH, PV6MATH, PV7MATH, PV8MATH, PV9MATH, PV10MATH, PV1SCIE, PV2SCIE, PV3SCIE, PV4SCIE, PV5SCIE, PV6SCIE, PV7SCIE, PV8SCIE, PV9SCIE, PV10SCIE, PV1READ, PV2READ, PV3READ, PV4READ, PV5READ, PV6READ, PV7READ, PV8READ, PV9READ, PV10READ, ESCS)\n\n# Step 2: Calculate row means for math, science, and reading\nstu_qqq_SG_1 &lt;- stu_qqq_SG_1 %&gt;%\n  mutate(maths = rowMeans(across(c(PV1MATH, PV2MATH, PV3MATH, PV4MATH, PV5MATH, PV6MATH, PV7MATH, PV8MATH, PV9MATH, PV10MATH))),\n         science = rowMeans(across(c(PV1SCIE, PV2SCIE, PV3SCIE, PV4SCIE, PV5SCIE, PV6SCIE, PV7SCIE, PV8SCIE, PV9SCIE, PV10SCIE))),\n         reading = rowMeans(across(c(PV1READ, PV2READ, PV3READ, PV4READ, PV5READ, PV6READ, PV7READ, PV8READ, PV9READ, PV10READ))))\n\n# Step 3: Rename columns for clarity\nstu_qqq_SG_1 &lt;- stu_qqq_SG_1 %&gt;%\n  rename(gender = ST004D01T, escs = ESCS, school = EXPECEDU)\n\n# Step 4: Select specific columns for further analysis\nstu_qqq_SG_2 &lt;- stu_qqq_SG_1 %&gt;%\n  select(gender, escs, school, maths, science, reading)\n\n# Step 5: Recode gender and school columns\nstu_qqq_SG_2 &lt;- stu_qqq_SG_2 %&gt;%\n  mutate(gender = ifelse(gender == \"1\", \"Female\", \"Male\"),\n         school = case_when(\n           school == \"2\" ~ \"Lower Sec\",\n           school == \"3\" ~ \"Upper Sec\",\n           school == \"5\" ~ \"Post Sec\",\n           school == \"6\" ~ \"Diploma\",\n           school == \"7\" ~ \"Degree\",\n           school == \"8\" ~ \"Masters\",\n           school == \"9\" ~ \"PhD\"\n         ))\n\n# Step 6: Write the cleaned data to an RDS file\nwrite_rds(stu_qqq_SG_2, \"data/stu_qqq_SG_2.rds\")\n\n# Step 7: Read the cleaned data from the RDS file\nstu_qqq_SG_2 &lt;- read_rds(\"data/stu_qqq_SG_2.rds\")\n\n\n\n\n\n\n\nCode Explanation - as.factor() function\n\n\n\nMoving on, the provided code transforms the ‘gender’ and ‘school’ columns in the R data frame stu_qqq_SG_2 into factors using the as.factor() function. This conversion is beneficial when dealing with categorical variables, as factors in R provide a structured representation of such data. The gender factor represents two categories, “Male” and “Female,” while the school factor likely denotes different levels of education, such as “Lower Sec,” “Upper Sec,” and others. Converting these columns to factors ensures that R recognises and treats them appropriately as categorical variables during statistical analysis, allowing for better representation and interpretation of the data. Subsequently, a summary statistics report is generated, offering a quick overview of the of the cleaned dataset.\n\n\n\n# Step 1: Converting gender and school into factors (categorical variables)\nstu_qqq_SG_2$gender &lt;- as.factor(stu_qqq_SG_2$gender)\n\nstu_qqq_SG_2$school &lt;- as.factor(stu_qqq_SG_2$school)\n\n# Step 2: Display summary statistics\nsummary(stu_qqq_SG_2)\n\n    gender          escs              school         maths      \n Female:3248   Min.   :-3.5488   Degree  :2062   Min.   :262.6  \n Male  :3358   1st Qu.:-0.2327   Diploma :1299   1st Qu.:506.2  \n               Median : 0.4817   Masters :1289   Median :582.4  \n               Mean   : 0.2904   PhD     :1045   Mean   :574.0  \n               3rd Qu.: 0.9036   Post Sec: 406   3rd Qu.:648.4  \n               Max.   : 3.2780   (Other) : 296   Max.   :842.7  \n               NA's   :47        NA's    : 209                  \n    science         reading     \n Min.   :242.0   Min.   :158.6  \n 1st Qu.:498.9   1st Qu.:477.4  \n Median :571.2   Median :553.6  \n Mean   :561.0   Mean   :542.5  \n 3rd Qu.:629.3   3rd Qu.:616.1  \n Max.   :801.9   Max.   :797.6"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#distribution-of-subjects-scores",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#distribution-of-subjects-scores",
    "title": "Take-home Exercise 2",
    "section": "3.1 Distribution of Subjects’ Scores",
    "text": "3.1 Distribution of Subjects’ Scores\n\n3.1.1 Original Design\nA histogram below is used to reveal the distribution of scores for each respective subject, in this particular case, the Maths scores.\n\n\n\n\n\n\n\n\n\n\n\n3.1.2 Critique\n\n\nCritique - Clarity\n\nThe title of the graph, “Histogram of Maths scores”, clearly states what the data represents, which is good for immediate understanding.\nThe data presented appears to be continuous, and the histogram effectively shows the distribution of the math scores. However, there are no markers for the mean or median score, which could provide additional useful information about the dataset.\n\n\n\nCritique - Aesthetics\n\nThe colour scheme is simple and the bars are easily distinguishable, which makes the graph aesthetically pleasing and clear to read.\nThe grey background is neutral and does not distract from the data, but a white background could be considered for a cleaner look.\nThe text is not capitalised, which is fine for informality but could be capitalised for a more formal and professional appearance.\nThere is a consistent use of colour and no extraneous graphical elements, which is good. However, the graph could benefit from a cleaner font and perhaps a grid for easier reading of values.\n\n\n\n3.1.3 Remake\nTo improve the histogram in terms of clarity and aesthetics,\n\n\nRemake - Clarity:\n\nInclude annotations for key statistics such as the mean or median to give viewers a better understanding of the central tendency of the data.\n\n\n\nRemake - Aesthetics:\n\nChange the background to white for a more professional look.\nCapitalise the first letter of each label for a more formal presentation.\nAdd a light grid to make it easier to read values from the graph.\nChoose a cleaner, more professional font for all text elements.\n\n\n# Calculate the mean math score for annotation\nmean_score &lt;- mean(stu_qqq_SG_2$maths)\n\nggplot(data = stu_qqq_SG_2, aes(x = maths)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"black\",      \n                 fill = \"light blue\") + \n  geom_vline(aes(xintercept = mean_score), \n             color = \"red\", linetype = \"dashed\", size = 1) +\n  annotate(\"text\", x = mean_score, y = Inf, label = paste(\"Mean:\", round(mean_score, 2)), \n           vjust = 0.95, color = \"red\") +\n  labs(title = \"Histogram of Maths Scores\",\n       x = \"Math Score\",\n       y = \"Number of Students\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    axis.title = element_text(face = \"bold\"),\n    panel.grid.major = element_line(color = \"grey80\", size = 0.5),\n    panel.background = element_rect(fill = \"white\"),\n    axis.text = element_text(color = \"black\")\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#scatterplot-of-socioeconomic-status-vs-maths-score",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#scatterplot-of-socioeconomic-status-vs-maths-score",
    "title": "Take-home Exercise 2",
    "section": "3.2 Scatterplot of Socioeconomic Status vs Maths Score",
    "text": "3.2 Scatterplot of Socioeconomic Status vs Maths Score\n\n3.2.1 Original Design\nA scatterplot below is used to reveal the relationship between the Socioeconmic status against the scores for each respective subject, in this particular case, the Maths scores.\n\n\n\n\n\n\n\n\n\n\n\n3.2.2 Critique\n\n\nCritique - Clarity\n\nThe title is descriptive, but it could be improved to concisely convey the key focus of the analysis, which is the relationship between socioeconomic status and math scores.\nWithout a regression line, it is difficult for the viewer to immediately grasp the nature of the relationship between the two variables.\nThe scatterplot does not indicate the correlation coefficient, which quantitatively summarises the strength and direction of the linear relationship.\nOverplotting may be obscuring the density of points in certain areas, making it difficult to assess the distribution of data accurately.\n\n\n\nCritique - Aesthetics\n\nThe plot uses a basic colour scheme, which is clear but does not make use of colour to convey additional information or to improve visual appeal.\nAll points are of the same size and colour, which could be varied to show density.\nThe grey background is neutral but does nott enhance the data visualisation; a lighter background with subtle gridlines could improve readability.\n\n\n\n3.2.3 Remake\nTo improve the scatterplot in terms of clarity and aesthetics,\n\n\nRemake - Clarity\n\nAdd a regression line to visually represent the relationship between math scores and socioeconomic status. This would not only clarify the direction and steepness of the relationship but also help in identifying patterns or deviations.\nCalculate and display the correlation coefficient on the plot to provide a clear, numerical summary of the relationship’s strength.\nImplement techniques to mitigate overplotting, such as adjusting the alpha transparency of points.\n\n\n\nRemake - Aesthetics\n\nIntroduce a colour gradient to reflect the density of overlapping points, which could enhance visual appeal and clarity.\nApply a more sophisticated theme, like theme_bw(), which provides a clean and professional look with white background and gridlines.\nIncrease the size and change the colour of the regression line, in this case brigh red, to make it stand out against the points.\n\n\n# Calculate the Pearson correlation coefficient, handling NA values appropriately\ncorrelation &lt;- cor(stu_qqq_SG_2$maths, stu_qqq_SG_2$escs, use = \"complete.obs\")\n\n# Create the scatterplot with improvements mentioned above\np &lt;- ggplot(data = stu_qqq_SG_2, aes(x = maths, y = escs)) +\n  geom_point(alpha = 0.4) +  # Adjust alpha for overplotting\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +  # Add regression line\n  ggtitle(\"Relationship Between Socioeconomic Status and Math Scores\") +\n  labs(x = \"Math Score\", y = \"Socioeconomic Status (PISA Index)\") +\n  theme_bw(base_size = 14) +  # Use a theme with white background\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),\n    axis.title = element_text(size = 14, face = \"bold\")\n  )\n\n# If correlation is not NA, add it to the plot\nif (!is.na(correlation)) {\n  p &lt;- p + annotate(\"text\", x = Inf, y = Inf, label = sprintf(\"r = %.2f\", correlation),\n                    hjust = 1.1, vjust = 1.1, color = \"red\", size = 5)\n}\n\n# Print the plot\nprint(p)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn this code, geom_point() is used with an alpha value to handle overplotting, geom_smooth() adds the regression line, and annotate() adds the correlation coefficient."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#distribution-of-socioeconomic-status-by-gender",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#distribution-of-socioeconomic-status-by-gender",
    "title": "Take-home Exercise 2",
    "section": "3.3 Distribution of Socioeconomic Status (by Gender)",
    "text": "3.3 Distribution of Socioeconomic Status (by Gender)\n\n3.3.1 Original Design\nA geom_density plot below is used to reveal the distribution between the Socioeconmic status by Gender.\n\nggplot(data=stu_qqq_SG_2, \n       aes(x = escs, \n           colour = gender)) +\n  geom_density()+\n  ggtitle(\"Distribution of Socioeconomic Status (by Gender)\")+\n  labs(x = \"Socioeconomic Status - PISA Index\")\n\n\n\n\n\n\n\n\n\n\n3.3.2 Critique\n\n\nCritique - Clarity\n\nRhe legend is clear and distinguishes between genders, which is good. However, more neutral colours could be used.\nThe plot indicates skewness, but without the actual data points or additional statistical annotations, it is difficult to validate the findings stated about the skewness or the comparative peaks of the distribution.\nThe x-axis is well labeled, but the y-axis is not labeled at all, which could lead to confusion about what the density values represent.\n\n\n\nCritique - Aesthetics\n\nThe colours are easily distinguishable but as mentioned earlier, may not be the best choice due to potential gender stereotyping.\nThe default grey background and grid might not be the most aesthetically pleasing. A cleaner look might be achieved with a white background and less prominent grid lines.\nThe density lines are quite thin. Increasing their thickness could make them stand out more clearly against the background.\n\n\n\n3.3.3 Remake\nTo improve the density plot in terms of clarity and aesthetics,\n\n\nRemake - Clarity\n\nAdding annotations for mean, median or mode for each gender could provide more context.\nIf the lines are overlapping significantly, consider using fill with alpha to differentiate the distributions while showing overlap.\n\n\n\nRemake - Aesthetics\n\nIn terms ot theme, we are using theme_minimal() for a more modern, clean aesthetic.\nFor colour palette, we will opt for a colourblind-friendly palette or more neutral tones.\nWe will also increase the line thickness for better visibility.\n\n\n# Calculate mean for each gender\nstats &lt;- stu_qqq_SG_2 %&gt;%\n  group_by(gender) %&gt;%\n  summarise(mean = mean(escs, na.rm = TRUE))\n\n# Create the density plot with annotations for mean \nggplot(data = stu_qqq_SG_2, aes(x = escs, fill = gender)) +\n  geom_density(alpha = 0.6) + # Use fill with transparency instead of color for lines\n  scale_fill_manual(values = c(\"#1f77b4\", \"#ff7f0e\")) + # Example of a colourblind-friendly palette\n  geom_vline(data = stats, aes(xintercept = mean, color = gender), linetype = \"dashed\") +\n  ggtitle(\"Distribution of Socioeconomic Status by Gender\") +\n  labs(x = \"Socioeconomic Status - PISA Index\", y = \"Density\") +\n  theme_minimal(base_size = 14) + # A cleaner theme\n  theme(legend.position = \"top\", # Position the legend on top\n        plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),\n        axis.title = element_text(size = 14, face = \"bold\"),\n        axis.text = element_text(color = \"black\"),\n        legend.title = element_blank()) + # Remove the legend title\n  scale_color_manual(values = c(\"#1f77b4\", \"#ff7f0e\"))  # Match line colours to the fill colours\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn density plots, the y-axis represents the density of the data, which is a function of the number of observations and the bin width used in the kernel density estimation. Therefore, it may not always start at 0, especially if there are no values in the data near 0.\nFor the x-axis, which represents the actual data points, it is often a good practice to start at 0 if it makes sense for the data. However, in our case, for socioeconomic status or indices like PISA, which can have negative values and often do not start at 0, it may be more appropriate to start at the minimum value of the data or a meaningful reference point that provides context."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#distribution-of-maths-scores-by-expected-school",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#distribution-of-maths-scores-by-expected-school",
    "title": "Take-home Exercise 2",
    "section": "3.4 Distribution of Maths Scores by Expected School",
    "text": "3.4 Distribution of Maths Scores by Expected School\n\n3.4.1 Original Design\nA histogram below is used to reveal the distribution between the expected school against the scores for each respective subject, in this particular case, the Maths scores.\n\nggplot(data=stu_qqq_SG_2, \n       aes(x= maths, \n           fill = school)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")+\n  ggtitle(\"Distribution of Maths scores (by Expected School)\")+\n  labs(x = \"Math Score\")+\n  labs(y= \"Number of students\")\n\n\n\n\n\n\n\n\n\n\n3.4.2 Critique\n\n\nCritique - Clarity\n\nOverlapping Bars: The histogram uses stacked bars to represent different schools, which makes it difficult to compare the distributions of math scores between schools, especially for those not at the bottom of the stack.\nColour Choice: The colours are distinct, but there are so many that it becomes hard to differentiate and track across the histogram. This is particularly challenging for individuals with colour vision deficiencies.\nLegend Positioning: The legend is positioned inside the plot area, which can potentially cover some of the data and reduce readability.\nBins: With a bin width set to produce 20 bins, some detail in the distribution may be lost, especially if the range of math scores is broad.\n\n\n\nCritique - Aesthetics\n\nColour Saturation: The colours are very saturated, which can be visually overwhelming and make it harder to focus on the data.\nGridlines: The absence of horizontal gridlines can make it hard to estimate the number of students for a given bin.\nBar Borders: The grey borders on the bars add visual clutter, especially where colours are similar.\n\n\n\n3.4.3 Remake\nTo improve the histogram in terms of clarity and aesthetics,\n\n\nRemake - Clarity\n\nSwitch to Faceted Plot: Instead of stacking, use faceted histograms or side-by-side histograms to compare distributions between schools without overlap.\nSimplify Colour Palette: Use a simpler colour palette with fewer colours or shades to help distinguish between schools, or use patterns instead of colours for differentiation.\nReposition Legend: Move the legend outside the plot area, such as to the bottom or side, to avoid obscuring the data.\n\n\n\nRemake - Aesthetics\n\nWe use a theme with a cleaner aesthetic, such as theme_minimal(), which provides a white background and less intrusive gridlines.\nRemove Bar Borders: We need to eliminate the borders or use a softer colour that does not compete with the fill colour.\nAdd Horizontal Gridlines: We need to include soft horizontal gridlines for easier comparison of heights across the histogram.\n\n\n# Create the histogram with improvements mentioned above\nggplot(data = stu_qqq_SG_2, aes(x = maths, fill = school)) +\n  geom_histogram(position = \"dodge\", bins = 20, color = NA) +  # Use 'position = dodge' to place bars side by side\n  scale_fill_brewer(palette = \"Pastel1\") +  # Use a pastel colour palette for better distinction\n  ggtitle(\"Distribution of Maths Scores by Expected School\") +\n  labs(x = \"Math Score\", y = \"Number of Students\") +\n  theme_minimal(base_size = 14) +  # Cleaner theme\n  theme(legend.position = \"bottom\",  # Move legend to the bottom\n        plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),\n        axis.title = element_text(size = 14, face = \"bold\"),\n        axis.text = element_text(color = \"black\"),\n        panel.grid.major = element_line(color = \"grey80\", size = 0.5),\n        panel.grid.minor = element_blank(),\n        legend.box.background = element_rect(color = \"white\"))  # Add a background to the legend box\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn this code, position = \"dodge\" is used to place the bars side by side instead of stacking them, which greatly improves clarity when comparing between schools. A pastel colour palette from scale_fill_brewer() is used to distinguish the schools while being less visually overwhelming. The legend is moved to the bottom of the plot to avoid obscuring any data."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#boxplot-between-gender-and-maths-scores",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#boxplot-between-gender-and-maths-scores",
    "title": "Take-home Exercise 2",
    "section": "3.5 Boxplot between Gender and Maths Scores",
    "text": "3.5 Boxplot between Gender and Maths Scores\n\n3.5.1 Original Design\nA boxplot below is used to reveal the distribution between maths score and Gender.\n\n\n3.5.2 Critique\n\n\nCritique - Clarity\n\nMean Indication: The red dot indicating the mean is a good addition for showing central tendency, but there is no legend explaining what the red dot signifies. Viewers might not realise it represents the mean math score.\nAxis Labels: While the y-axis is labeled, it could be more descriptive. Instead of “Maths Score,” a label like “Math Score Distribution” might provide more context.\nGender Labeling: The x-axis labels “Female” and “Male” could be more inclusive. The plot does not account for non-binary or other gender identities, which might be relevant depending on the context of the data.\n\n\n\nCritique - Aesthetics\n\nColour Scheme: The use of red for the mean is visually effective, but the rest of the plot is quite monochrome. Utilising a subtle colour for the boxes could improve visual appeal.\nPlot Spacing: The spacing between the two boxplots is quite large, which may not be an efficient use of space.\nGridlines: There are no horizontal gridlines, which can help viewers better estimate the values of the quartiles and the mean.\n\n\n\n3.5.3 Remake\nTo improve the boxplot in terms of clarity and aesthetics,\n\n\nRemake - Clarity\n\nLegend for Mean: Add a legend or annotation to explain the red dot represents the mean.\nAdditional Statistics: Add more summary statistics, such as the median (which the boxplot inherently shows), using different point shapes or colours to provide a fuller picture of the distribution.\n\n\n\nRemake - Aesthetics\n\nColour for Boxes: Introduce a light colour fill within the boxes to enhance visual differentiation between the quartiles and the overall distribution.\nReduce Width: Decrease the width of the individual boxplots to bring them closer together and use space more efficiently.\nGridlines: Add horizontal gridlines for better readability of values.\n\n\n# Enhanced boxplot with additional statistics and legends\nggplot(data = stu_qqq_SG_2, aes(x = gender, y = maths)) +    \n  geom_boxplot(aes(fill = gender)) +\n  scale_fill_manual(values = c(\"#EBF5FB\", \"#FEF9E7\")) + # Subtle colours for the boxes\n  geom_point(stat = \"summary\", aes(color = \"Mean\"), fun.y = \"mean\", size = 4) +\n  geom_point(stat = \"summary\", aes(color = \"Median\"), fun.y = \"median\", size = 4, shape = 18) +\n  ggtitle(\"Boxplot of Math Score by Gender\") +\n  labs(y = \"Math Score Distribution\", x = \"\", color = \"Summary Statistics\") + # More descriptive y-axis label, remove x-axis label\n  scale_color_manual(values = c(\"Mean\" = \"red\", \"Median\" = \"blue\")) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),\n    axis.title = element_text(size = 14, face = \"bold\"),\n    legend.position = \"right\",\n    legend.title.align = 0.5,\n    panel.grid.major.y = element_line(color = \"grey80\", size = 0.5), # Add y gridlines\n    panel.grid.minor = element_blank()\n  ) +\n  coord_flip() # Flip the coordinates into horizontal position\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis code adds subtle colours to the boxplot fills, differentiates between the mean and median with different colours and shapes, and adds y-axis gridlines for better readability. The coord_flip() is included as to flip the boxplots to a horizontal orientation, which is sometimes preferred for readability."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Andreas Schleicher, the education director of OECD, conveyed in a BBC article that Singapore has achieved excellence without significant disparities between children from affluent and underprivileged families (2016). Additionally, several Ministers for Education in Singapore have adopted the slogan “every school a good school.” Despite these efforts, the prevailing public opinion strongly suggests the presence of disparities, particularly between elite and neighbourhood schools, among students from families with varying socioeconomic statuses, and between immigration and non-immigration families.\n\n\n\nThe data that we will be using would be the 2022 Programme for International Student Assessment (PISA), which evaluates education systems globally by testing 15-year-old students in mathematics, reading, and science.\nBy employing some EDA, we would want to find out:\n\nThe distribution of Singaporean students’ proficiency in mathematics, reading and science\nThe correlation between these performance levels and factors such as schools, gender and the socioeconomic status of the students"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Andreas Schleicher, the education director of OECD, conveyed in a BBC article that Singapore has achieved excellence without significant disparities between children from affluent and underprivileged families (2016). Additionally, several Ministers for Education in Singapore have adopted the slogan “every school a good school.” Despite these efforts, the prevailing public opinion strongly suggests the presence of disparities, particularly between elite and neighbourhood schools, among students from families with varying socioeconomic statuses, and between immigration and non-immigration families."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#our-task",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#our-task",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "The data that we will be using would be the 2022 Programme for International Student Assessment (PISA), which evaluates education systems globally by testing 15-year-old students in mathematics, reading, and science.\nBy employing some EDA, we would want to find out:\n\nThe distribution of Singaporean students’ proficiency in mathematics, reading and science\nThe correlation between these performance levels and factors such as schools, gender and the socioeconomic status of the students"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-r-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-r-packages",
    "title": "Take-home Exercise 1",
    "section": "2.1 Loading R packages",
    "text": "2.1 Loading R packages\nIn this take-home exercise, tidyverse and haven packages will be used.\nAlso, we will be using these packages listed below:\n\nggrepel is an R package that offers geoms for ggplot2, enabling the repulsion of overlapping text labels\nggthemes is an R package that offers additional themes, geoms, and scales for ‘ggplot2’\nhrbrthemes is an R package that offers typography-centric themes and theme components for ggplot2\npatchwork is an R package designed for creating composite figures using ggplot2\ndplyr is a data manipulation package in R that offers a consistent set of functions, or verbs, to address common data manipulation tasks. It includes functions such as ‘mutate()’ for creating new variables, ‘select()’ for choosing variables by name, ‘filter()’ for selecting cases based on values, ‘summarise()’ for reducing multiple values to a single summary, and ‘arrange()’ for changing the row ordering in a dataset.\n\nnote: The tidyverse package is an “umbrella-package” that installs tidyr, dplyr and several other useful packages for data analysis, such as ggplot2, tibble, etc.\nThe code chunk used is as follows:\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes, dplyr, ggdist, ggridges,\n               tidyverse, haven)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-the-dataset",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-the-dataset",
    "title": "Take-home Exercise 1",
    "section": "2.2 Importing the dataset",
    "text": "2.2 Importing the dataset\nOne dataset from PISA is provided for this task, specifically the Student questionnaire data file: cy08msp_stu_qqq.sas7bdat\nThe code chunk below uses read_sas() of haven to import PISA data into R environment.\n\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#filtering-data-from-singapore-only",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#filtering-data-from-singapore-only",
    "title": "Take-home Exercise 1",
    "section": "2.3 Filtering data from Singapore only",
    "text": "2.3 Filtering data from Singapore only\nSince our task is to find out students’ performance in various subjects and relationship of performances with regards to other variables in Singapore, we would need to filter data to only include Singapore. Since there is a CNT column, which is a Country column, we will filter it to only include SGP (Singapore).\nThe code chunk to filter SGP only:\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\nSince the original data is huge in file size, we will save the Singapore filtered data as stu_qqq_SG in the data folder.\nThe code chunk to save filtered data as stu_qqq_SG:\n\nwrite_rds(stu_qqq_SG,\n          \"data/stu_qqq_SG.rds\")\n\nTherefore, we will only read the stu_qqq_SG.rds file from now onwards.\nThe code chunk to read stu_qqq_SG.rds file:\n\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary-statistics-of-stu_qqq_sg-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#summary-statistics-of-stu_qqq_sg-data",
    "title": "Take-home Exercise 1",
    "section": "2.4 Summary Statistics of stu_qqq_SG data",
    "text": "2.4 Summary Statistics of stu_qqq_SG data\nTo check if we have filtered the correct data to include SG only, we will be displaying first 10 rows using head():\n\nThe outputThe code\n\n\n\n\n# A tibble: 10 × 1,279\n   CNT   CNTRYID CNTSCHID CNTSTUID CYC   NatCen STRATUM SUBNATIO REGION  OECD\n   &lt;chr&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n 1 SGP       702 70200052 70200001 08MS  070200 SGP01   7020000   70200     0\n 2 SGP       702 70200134 70200002 08MS  070200 SGP01   7020000   70200     0\n 3 SGP       702 70200112 70200003 08MS  070200 SGP01   7020000   70200     0\n 4 SGP       702 70200004 70200004 08MS  070200 SGP01   7020000   70200     0\n 5 SGP       702 70200152 70200005 08MS  070200 SGP01   7020000   70200     0\n 6 SGP       702 70200043 70200006 08MS  070200 SGP01   7020000   70200     0\n 7 SGP       702 70200049 70200007 08MS  070200 SGP01   7020000   70200     0\n 8 SGP       702 70200107 70200008 08MS  070200 SGP01   7020000   70200     0\n 9 SGP       702 70200012 70200009 08MS  070200 SGP01   7020000   70200     0\n10 SGP       702 70200061 70200010 08MS  070200 SGP01   7020000   70200     0\n# ℹ 1,269 more variables: ADMINMODE &lt;dbl&gt;, LANGTEST_QQQ &lt;dbl&gt;,\n#   LANGTEST_COG &lt;dbl&gt;, LANGTEST_PAQ &lt;dbl&gt;, Option_CT &lt;dbl&gt;, Option_FL &lt;dbl&gt;,\n#   Option_ICTQ &lt;dbl&gt;, Option_WBQ &lt;dbl&gt;, Option_PQ &lt;dbl&gt;, Option_TQ &lt;dbl&gt;,\n#   Option_UH &lt;dbl&gt;, BOOKID &lt;dbl&gt;, ST001D01T &lt;dbl&gt;, ST003D02T &lt;dbl&gt;,\n#   ST003D03T &lt;dbl&gt;, ST004D01T &lt;dbl&gt;, ST250Q01JA &lt;dbl&gt;, ST250Q02JA &lt;dbl&gt;,\n#   ST250Q03JA &lt;dbl&gt;, ST250Q04JA &lt;dbl&gt;, ST250Q05JA &lt;dbl&gt;, ST250D06JA &lt;chr&gt;,\n#   ST250D07JA &lt;chr&gt;, ST251Q01JA &lt;dbl&gt;, ST251Q02JA &lt;dbl&gt;, ST251Q03JA &lt;dbl&gt;, …\n\n\n\n\n\nhead(stu_qqq_SG,10)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-subjects-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-subjects-data",
    "title": "Take-home Exercise 1",
    "section": "2.5 Preparing Subjects Data",
    "text": "2.5 Preparing Subjects Data\nIn order to assess students’ performance in various subjects, including Mathematics, Reading and Science, we must identify the columns that correspond to these specific subjects.\nWith reference to PISA website, we can utilise plausible estimates for assessing student proficiency. PISA evaluates student achievement using plausible values (PVs), derived from Item Response Theory models (refer to Chapter 5 of the PISA Data Analysis Manual: SAS or SPSS, Second Edition, or the accompanying guide “Scaling of Cognitive Data and Use of Students Performance Estimates” for detailed information). These models fundamentally deduce a student’s ability from their test performance. In application, plausible values are produced through multiple imputations, considering pupils’ responses to the randomly assigned subset of test questions and their input in background questionnaires.\n\n2.5.1 Preparing Maths Data\nAfter looking through the dataset, we have determined that the columns denoting Mathematics performance are PV1MATH to PV10MATH.\nConsequently, we will compute the average of these plausible values using the rowMeans() function. A new column, called MATHEMATICS, will be generated to store the calculated average plausible values for the Mathematics subject.\nThe corresponding code snippet is as follows:\n\n# Select the columns containing math plausible values\nmath_columns &lt;- stu_qqq_SG[, c(\"PV1MATH\", \"PV2MATH\", \"PV3MATH\", \"PV4MATH\", \"PV5MATH\", \"PV6MATH\", \"PV7MATH\", \"PV8MATH\", \"PV9MATH\", \"PV10MATH\")]\n\n# Calculate the row-wise mean\nmath_row_means &lt;- rowMeans(math_columns)\n\n# Add the row means as a new column to the data frame\nstu_qqq_SG$MATHEMATICS &lt;- math_row_means\n\n\n\n2.5.2 Preparing Reading Data\nSimilarly, upon close examination of the dataset, we have identified that the columns associated with Reading are PV1READ to PV10READ.\nAs a result, we will calculate the average of these plausible values using the rowMeans() function. A new column, labeled READING, will be created to store the resulting average plausible values for the Reading subject.\nThe corresponding code snippet is provided below:\n\n# Select the columns containing read plausible values\nreading_columns &lt;- stu_qqq_SG[, c(\"PV1READ\", \"PV2READ\", \"PV3READ\", \"PV4READ\", \"PV5READ\", \"PV6READ\", \"PV7READ\", \"PV8READ\", \"PV9READ\", \"PV10READ\")]\n\n# Calculate the row-wise mean\nreading_row_means &lt;- rowMeans(reading_columns)\n\n# Add the row means as a new column to the data frame\nstu_qqq_SG$READING &lt;- reading_row_means\n\n\n\n2.5.3 Preparing Science Data\nLastly, upon a thorough review of the dataset, we have determined that the columns corresponding to Science are PV1SCIE to PV10SCIE.\nConsequently, we will use the rowMeans() function to compute the average of these plausible values. A new column, named SCIENCE, will be established to store the resulting average plausible values for the Science subject.\nThe corresponding code snippet is provided below:\n\n# Select the columns containing science plausible values\nscience_columns &lt;- stu_qqq_SG[, c(\"PV1SCIE\", \"PV2SCIE\", \"PV3SCIE\", \"PV4SCIE\", \"PV5SCIE\", \"PV6SCIE\", \"PV7SCIE\", \"PV8SCIE\", \"PV9SCIE\", \"PV10SCIE\")]\n\n# Calculate the row-wise mean\nscience_row_means &lt;- rowMeans(science_columns)\n\n# Add the row means as a new column to the data frame\nstu_qqq_SG$SCIENCE &lt;- science_row_means"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-gender-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-gender-data",
    "title": "Take-home Exercise 1",
    "section": "2.6 Preparing Gender Data",
    "text": "2.6 Preparing Gender Data\nUpon examining the dataset, a particular column labeled ‘ST004D01T’ provides information about gender, using the values 1 and 2. According to the PISA questionnaire manual, 1 corresponds to female, while 2 corresponds to male.\nTo facilitate a more straightforward analysis, we intend to recode the values, assigning 1 to represent female and 2 to represent male. This recoding process will be carried out using the dplyr, a component of the tidyverse package.\nWe prefer generating a new column instead of altering the current one. To achieve this, employ the mutate function in conjunction with the assignment operator (=) to establish a fresh column.\nThis action will introduce a column named ‘GENDER’ into your ‘stu_qqq_SG’ dataset, with values redefined according to the ‘ST004D01T’ column. The original ‘ST004D01T’ column retains its original state, and now, a newly created ‘GENDER’ column contains the recoded values.”\nThe following code snippet provides the pertinent information:\n\n# Install and load the dplyr package if we have not done so\n# install.packages(\"dplyr\")\nlibrary(dplyr)\n\n# Create a new column 'GENDER' with recoded values\nstu_qqq_SG &lt;- stu_qqq_SG %&gt;%\n  mutate(GENDER = recode(ST004D01T, \"1\" = \"female\", \"2\" = \"male\"))\n\nTo check if we have recoded the gender data correctly, we will be displaying the first 10 rows of the GENDER column:\n\nThe outputThe code\n\n\n\n\n# A tibble: 10 × 1\n   GENDER\n   &lt;chr&gt; \n 1 female\n 2 male  \n 3 male  \n 4 male  \n 5 female\n 6 female\n 7 male  \n 8 male  \n 9 female\n10 male  \n\n\n\n\n\nhead(stu_qqq_SG[c(\"GENDER\")],10)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-socioeconomic-status-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-socioeconomic-status-data",
    "title": "Take-home Exercise 1",
    "section": "2.7 Preparing Socioeconomic Status Data",
    "text": "2.7 Preparing Socioeconomic Status Data\nWith reference to the PISA 2022 Technical Report, Figure 5.1 in the PISA 2022 Technical Report illustrates the two-dimensional framework taxonomy. The primary dimension categorises proposed constructs into two overarching categories defined by the PISA Governing Board (PGB): domain-specific constructs and general constructs, with the latter encompassing Economic, Social and Cultural Status (ESCS). The secondary dimension further categorises proposed constructs into five categories based on key areas of educational policy setting at different levels of aggregation. These categories include Student Background, Student Beliefs, Attitudes, Feelings. and Behaviours, Teaching Practices and Learning Opportunities, School Practices, Policies, and Infrastructure, and Governance, System-Level Policies, and Practices.\nTherefore, it can be inferred that the ‘ESCS’ column can be utilised for assessing the socioeconomic status of students.\nIf we view the ‘ESCS’ column, there are negative and positive ESCS values, it generally implies a relative positioning of students along a spectrum of economic, social and cultural advantages or disadvantages.\n\nPositive ESCS value: This typically indicates a higher socioeconomic status, suggesting that the student comes from an environment with more favourable economic conditions, higher social standing, and a richer cultural background. Students with positive ESCS values may have access to more resources, educational support and opportunities.\nNegative ESCS value: Conversely, a negative ESCS value suggests a lower socioeconomic status. Students with negative ESCS values may face economic challenges, have a lower social standing, and possibly experience a less enriched cultural environment. These students may encounter additional obstacles in their educational journey due to a lack of resources or support.\n\nThe first 10 rows of the ESCS column can be seen here:\n\nThe outputThe code\n\n\n\n\n# A tibble: 10 × 1\n      ESCS\n     &lt;dbl&gt;\n 1  0.184 \n 2  0.826 \n 3 -1.04  \n 4 -0.961 \n 5  0.0856\n 6  0.127 \n 7 -0.0154\n 8  1.16  \n 9  1.47  \n10  0.520 \n\n\n\n\n\nhead(stu_qqq_SG[c(\"ESCS\")],10)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-school-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#preparing-school-data",
    "title": "Take-home Exercise 1",
    "section": "2.8 Preparing School Data",
    "text": "2.8 Preparing School Data\nExploring the dataset reveals a sole column dedicated to schools, labeled ‘CNTSCHID.’ Regrettably, the dataset lacks details about the nature of CNTSCHID or the specific identity associated with each school ID. Nonetheless, we must work with the available information as is.\nThe first 10 rows of the CNTSCHID column can be seen here:\n\nThe outputThe code\n\n\n\n\n# A tibble: 10 × 1\n   CNTSCHID\n      &lt;dbl&gt;\n 1 70200052\n 2 70200134\n 3 70200112\n 4 70200004\n 5 70200152\n 6 70200043\n 7 70200049\n 8 70200107\n 9 70200012\n10 70200061\n\n\n\n\n\nhead(stu_qqq_SG[c(\"CNTSCHID\")],10)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#three-subjects---mathematics-reading-and-science",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#three-subjects---mathematics-reading-and-science",
    "title": "Take-home Exercise 1",
    "section": "3.1 Three Subjects - Mathematics, Reading and Science",
    "text": "3.1 Three Subjects - Mathematics, Reading and Science\n\n3.1.1 Distribution Across Three Subjects - Mathematics, Reading and Science\nWe will now do the plot for each respective subject. We will be doing a histogram to show the distribution across three subjects.\nThe code will be shown below:\n\nMathematicsReadingScience\n\n\n\np1 &lt;- ggplot(data=stu_qqq_SG, \n             aes(x = MATHEMATICS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"light blue\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") +\n  geom_vline(xintercept = mean(stu_qqq_SG$MATHEMATICS), \n             color = \"red\", \n             linetype = \"dashed\", \n             size = 1)\n\n\n\n\np2 &lt;- ggplot(data=stu_qqq_SG, \n             aes(x = READING)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"light blue\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Reading scores\") +\n  geom_vline(xintercept = mean(stu_qqq_SG$READING), \n             color = \"red\", \n             linetype = \"dashed\", \n             size = 1)\n\n\n\n\np3 &lt;- ggplot(data=stu_qqq_SG, \n             aes(x = SCIENCE)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"light blue\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Science scores\") +\n  geom_vline(xintercept = mean(stu_qqq_SG$SCIENCE), \n             color = \"red\", \n             linetype = \"dashed\", \n             size = 1) \n\n\n\n\nThe figure in the tabset below displays a composite of three histograms, seamlessly created using patchwork. This is specifically designed for merging separate ggplot2 graphs into a unified figure. The red dotted line indicates the mean.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\nThe histogram presented above offers a visual representation of the distribution of scores across three academic subjects: MATHEMATICS, READING and SCIENCE. The distribution pattern observed for each subject strongly aligns with the characteristics of a normal distribution.\nA normal distribution is characterised by a symmetrical bell-shaped curve, with the majority of data points clustering around the mean and gradually tapering off towards the extremes. In the context of academic performance, this implies that a significant proportion of students scored close to the average, while fewer students achieved scores either significantly above or below the mean. In the case of academic assessments, a normal distribution suggests that the difficulty level of the questions was appropriately balanced, allowing for a diverse range of scores among the students.\n\n\n3.1.2 Reading vs Mathematics\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=stu_qqq_SG, \n       aes(x= READING, \n           y=MATHEMATICS)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(150,850),\n                  ylim=c(150,850))\n\n\n\n\nThe scatterplot depicted above illustrates a positive correlation between reading and mathematics values. As the reading values increase, so do the corresponding mathematics values. This relationship is further emphasised by the upward trend observed in the best fit line. The consistent increase in one variable is mirrored by a proportional increase in the other. In light of these findings, it can be confidently asserted that a positive connection exists, suggesting that engaging in reading contributes to enhanced performance in mathematics among students."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#reading-as-our-main-focus",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#reading-as-our-main-focus",
    "title": "Take-home Exercise 1",
    "section": "3.2 “Reading” as our main focus",
    "text": "3.2 “Reading” as our main focus\nWith reference to this research paper titled ‘Reading matters more than mathematics in science learning: an analysis of the relationship between student achievement in reading, mathematics, and science’ by Yuanze Zhu, the results revealed that proficiency in reading and mathematics strongly correlated with science achievement, with reading exerting a more substantial influence than mathematics. Consequently, we assert that prioritising reading over mathematics is essential for enhanced performance in science learning.\nHenceforth, our focus will be exclusively on reading, considering it as the primary driver for improved achievement in other subjects, including Mathematics and Science.\n\n3.2.1 Reading vs Gender\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=stu_qqq_SG, \n       aes(y = READING, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=2)      \n\n\n\n\nWhen it comes to the Reading, females exhibit a higher average performance compared to their male counterparts. The visual representation underscores a clear distinction, suggesting that, on average, females outperform males in the domain of Reading. One plausible interpretation for this observed trend could be rooted in the varying learning styles or preferences between genders. Research has suggested that females may, on average, possess certain cognitive strengths or approaches that align more closely with the skills demanded in Reading tasks. Additionally, sociocultural factors and educational environments may play a role in shaping differential outcomes, influencing how males and females engage with and excel in Reading-related activities.\n\n\n3.2.2 Reading vs Socioeconomic Status (ESCS)\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=stu_qqq_SG, \n       aes(x= READING, y=ESCS)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\nExamining the scatterplot above, it becomes evident that within the reading value range of 200-400, there is minimal correlation with ESCS. During this range, ESCS values exhibit considerable variability, ranging from -3 to 3. However, as reading values surpass 400, ESCS values predominantly hover around 0 and above, indicating a positive relationship. In other words, higher reading values correspond to higher ESCS values. This positive association is further emphasised by the upward trend observed in the best-fit line.\n\n\n3.2.3 Reading vs School ID\nGiven the extensive size of the dataset, our strategy is to concentrate on the top 5 schools that exhibit the highest frequency. Achieving this involves tallying the occurrences of School IDs in the CNTSCHID column.\nTo obtain the counts of each unique CNTSCHID value in descending order, we can use the table() function along with sorting functions.\n\nThe codeThe output\n\n\n\n# Our dataframe is named stu_qqq_SG and the column is CNTSCHID\nschid_counts &lt;- table(stu_qqq_SG$CNTSCHID)\n\n# Convert the result to a data frame and sort in descending order\nschid_counts_df &lt;- as.data.frame(schid_counts)\nschid_counts_df &lt;- schid_counts_df[order(-schid_counts_df$Freq), ]\n\n# Print or use the schid_counts_df as needed\nprint(schid_counts_df)\n\n\n\n\n\n        Var1 Freq\n20  70200020   60\n75  70200075   60\n158 70200159   59\n13  70200013   58\n45  70200045   58\n66  70200066   58\n141 70200141   58\n12  70200012   57\n40  70200040   57\n62  70200062   57\n105 70200105   57\n110 70200110   57\n118 70200118   57\n132 70200132   57\n4   70200004   56\n11  70200011   56\n26  70200026   56\n31  70200031   56\n35  70200035   56\n49  70200049   56\n67  70200067   56\n71  70200071   56\n82  70200082   56\n94  70200094   56\n130 70200130   56\n1   70200001   55\n44  70200044   55\n52  70200052   55\n111 70200111   55\n142 70200142   55\n145 70200145   55\n154 70200155   55\n27  70200027   54\n43  70200043   54\n119 70200119   54\n139 70200139   54\n18  70200018   52\n114 70200114   51\n38  70200038   40\n90  70200090   40\n112 70200112   40\n128 70200128   40\n150 70200151   40\n161 70200162   40\n17  70200017   39\n19  70200019   39\n29  70200029   39\n53  70200053   39\n59  70200059   39\n61  70200061   39\n63  70200063   39\n65  70200065   39\n68  70200068   39\n84  70200084   39\n104 70200104   39\n106 70200106   39\n131 70200131   39\n137 70200137   39\n164 70200165   39\n2   70200002   38\n5   70200005   38\n7   70200007   38\n8   70200008   38\n25  70200025   38\n36  70200036   38\n64  70200064   38\n73  70200073   38\n92  70200092   38\n93  70200093   38\n116 70200116   38\n126 70200126   38\n134 70200134   38\n140 70200140   38\n146 70200146   38\n151 70200152   38\n16  70200016   37\n21  70200021   37\n22  70200022   37\n32  70200032   37\n39  70200039   37\n42  70200042   37\n46  70200046   37\n47  70200047   37\n74  70200074   37\n76  70200076   37\n80  70200080   37\n85  70200085   37\n86  70200086   37\n87  70200087   37\n108 70200108   37\n117 70200117   37\n120 70200120   37\n121 70200121   37\n127 70200127   37\n135 70200135   37\n136 70200136   37\n144 70200144   37\n152 70200153   37\n155 70200156   37\n162 70200163   37\n163 70200164   37\n3   70200003   36\n6   70200006   36\n9   70200009   36\n10  70200010   36\n14  70200014   36\n24  70200024   36\n34  70200034   36\n37  70200037   36\n48  70200048   36\n51  70200051   36\n54  70200054   36\n58  70200058   36\n70  70200070   36\n81  70200081   36\n83  70200083   36\n88  70200088   36\n89  70200089   36\n96  70200096   36\n99  70200099   36\n102 70200102   36\n103 70200103   36\n109 70200109   36\n122 70200122   36\n125 70200125   36\n129 70200129   36\n143 70200143   36\n159 70200160   36\n160 70200161   36\n23  70200023   35\n55  70200055   35\n77  70200077   35\n91  70200091   35\n97  70200097   35\n101 70200101   35\n107 70200107   35\n133 70200133   35\n153 70200154   35\n15  70200015   34\n72  70200072   34\n98  70200098   34\n100 70200100   34\n113 70200113   34\n156 70200157   34\n33  70200033   33\n56  70200056   33\n69  70200069   33\n115 70200115   33\n123 70200123   32\n124 70200124   32\n79  70200079   31\n148 70200148   31\n30  70200030   30\n50  70200050   30\n147 70200147   30\n60  70200060   29\n157 70200158   29\n57  70200057   28\n95  70200095   28\n149 70200149   28\n28  70200028   22\n78  70200078   22\n138 70200138   15\n41  70200041    5\n\n\n\n\n\nFrom the output, we can see that the top 5 School IDs are:\n\n70200020\n70200075\n70200159\n70200013\n70200045\n\nTherefore, we will only focus on the above mentioned School IDs for our analysis.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Filter the data for specific values of CNTSCHID\nfiltered_data &lt;- stu_qqq_SG %&gt;%\n  filter(CNTSCHID %in% c(70200020, 70200075, 70200159, 70200013, 70200045))\n\n# Convert CNTSCHID to factor\nfiltered_data$CNTSCHID &lt;- as.factor(filtered_data$CNTSCHID)\n\n# Create the plot with the filtered data\nggplot(data = filtered_data, \n       aes(y = READING, x = CNTSCHID)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\",        \n             fun.y = \"mean\",           \n             colour = \"red\",          \n             size = 2)\n\n\n\n\nUpon a detailed analysis of the boxplot, which visually encapsulates the distribution of Reading plausible values across multiple schools (identified by CNTSCHID), a distinct trend emerges. Notably, CNTSCHID 70200020, representing a specific school within the dataset, stands out with the highest mean Reading score, hovering around an impressive ~630. This observation sheds light on the academic performance of this particular school, suggesting a noteworthy level of achievement in Reading compared to the other four schools. The boxplot serves as a valuable tool in visually conveying these distributional nuances, highlighting the academic prowess of CNTSCHID 70200020 within the context of Reading achievement among the schools."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Step into the captivating world of ISSS608 Visual Analytics and Applications! Brace yourself for an immersive journey as you explore this digital realm, where my coursework for this course comes to life. Get ready to embark on a visual odyssey that goes beyond the ordinary – a fusion of knowledge and creativity awaits you within these virtual corridors!\n\n\n\nPicture from: MattD, Former Alteryx, Inc. Support Engineer, Community Data Architect, Data Scientist then Data Engineer\n\n\n\n\n\n\n\n\nJoke: Why did the scatter plot go to therapy?\n\n\n\n\n\nIt couldn’t handle the emotional baggage of its outliers!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "Hands-on Exercise 6: Visual Multivariate Analysis",
    "section": "",
    "text": "Then we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#the-data",
    "title": "Hands-on Exercise 6: Visual Multivariate Analysis",
    "section": "6.3.1 The Data",
    "text": "6.3.1 The Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#importing-the-data",
    "title": "Hands-on Exercise 6: Visual Multivariate Analysis",
    "section": "6.3.2 Importing the data",
    "text": "6.3.2 Importing the data\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#examining-the-data-structure",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#examining-the-data-structure",
    "title": "Hands-on Exercise 6: Visual Multivariate Analysis",
    "section": "6.3.3 Examining the data structure",
    "text": "6.3.3 Examining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation",
    "title": "Hands-on Exercise 6: Visual Multivariate Analysis",
    "section": "6.3.4 Data Preparation",
    "text": "6.3.4 Data Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-the-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-the-calendar-heatmaps",
    "title": "Hands-on Exercise 6: Visual Multivariate Analysis",
    "section": "6.3.5 Building the Calendar Heatmaps",
    "text": "6.3.5 Building the Calendar Heatmaps\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-multiple-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-multiple-calendar-heatmaps",
    "title": "Hands-on Exercise 6: Visual Multivariate Analysis",
    "section": "6.3.6 Building Multiple Calendar Heatmaps",
    "text": "6.3.6 Building Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-multiple-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-multiple-calendar-heatmaps",
    "title": "Hands-on Exercise 6: Visual Multivariate Analysis",
    "section": "6.3.7 Plotting Multiple Calendar Heatmaps",
    "text": "6.3.7 Plotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-multiple-calendar-heatmaps-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-multiple-calendar-heatmaps-1",
    "title": "Hands-on Exercise 6: Visual Multivariate Analysis",
    "section": "6.3.8 Plotting Multiple Calendar Heatmaps",
    "text": "6.3.8 Plotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import",
    "title": "Hands-on Exercise 6: Visual Multivariate Analysis",
    "section": "6.4.1 Step 1: Data Import",
    "text": "6.4.1 Step 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-deriving-month-and-year-fields",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-deriving-month-and-year-fields",
    "title": "Hands-on Exercise 6: Visual Multivariate Analysis",
    "section": "6.4.2 Step 2: Deriving month and year fields",
    "text": "6.4.2 Step 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-4-extracting-the-target-country",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-4-extracting-the-target-country",
    "title": "Hands-on Exercise 6: Visual Multivariate Analysis",
    "section": "6.4.3 Step 4: Extracting the target country",
    "text": "6.4.3 Step 4: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-5-computing-year-average-arrivals-by-month",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-5-computing-year-average-arrivals-by-month",
    "title": "Hands-on Exercise 6: Visual Multivariate Analysis",
    "section": "6.4.4 Step 5: Computing year average arrivals by month",
    "text": "6.4.4 Step 5: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#srep-6-plotting-the-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#srep-6-plotting-the-cycle-plot",
    "title": "Hands-on Exercise 6: Visual Multivariate Analysis",
    "section": "6.4.5 Srep 6: Plotting the cycle plot",
    "text": "6.4.5 Srep 6: Plotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-plotting-the-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-plotting-the-slopegraph",
    "title": "Hands-on Exercise 6: Visual Multivariate Analysis",
    "section": "6.5.2 Step 2: Plotting the slopegraph",
    "text": "6.5.2 Step 2: Plotting the slopegraph\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\"\n                )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#our-dataset",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#our-dataset",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "5.3.1 Our dataset",
    "text": "5.3.1 Our dataset\nIn this practical exercise, we will utilise the dataset titled “Singapore Residents by Planning Area/Subzone, Age Group, Sex, and Type of Dwelling, June 2000-2018.” This dataset has already been downloaded and is stored in the ‘data’ sub-folder within the exercise folder. The file is named respopagsex2000to2018_tidy.csv and is available in CSV format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-data",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "5.3.2 Importing Data",
    "text": "5.3.2 Importing Data\nTo import ‘respopagsex2000to2018_tidy.csv’ into R, read_csv() function of readr package will be used.\n\n#Reading the data into R environment\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#preparing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#preparing-the-data",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "5.3.3 Preparing the Data",
    "text": "5.3.3 Preparing the Data\nNext, use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-a-static-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-a-static-ternary-diagram",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "5.4.1 Plotting a static ternary diagram",
    "text": "5.4.1 Plotting a static ternary diagram\nUse ggtern() function of ggtern package to create a simple ternary plot.\n\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-an-interactive-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-an-interactive-ternary-diagram",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "5.4.2 Plotting an interactive ternary diagram",
    "text": "5.4.2 Plotting an interactive ternary diagram\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.\n\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.4.1 Tooltip effect with tooltip aesthetic",
    "text": "3.4.1 Tooltip effect with tooltip aesthetic\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-multiple-information-on-tooltip",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.5.1 Displaying multiple information on tooltip",
    "text": "3.5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#customising-tooltip-style",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.6.1 Customising Tooltip style",
    "text": "3.6.1 Customising Tooltip style\nCode chunk below uses opts_tooltip() of ggiraph to customize tooltip rendering by add css declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\nNotice that the background colour of the tooltip is black and the font colour is white and bold.\n\n\n\n\n\n\n\nRefer to Customising girafe objects to learn more about how to customise ggiraph objects."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-statistics-on-tooltip",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.6.2 Displaying statistics on tooltip",
    "text": "3.6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.6.3 Hover effect with data_id aesthetic",
    "text": "3.6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\n\n\n\nNote that the default value of the hover css is hover_css = “fill:orange;”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#styling-hover-effect",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.6.4 Styling hover effect",
    "text": "3.6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\nNote: Different from previous example, in this example the ccs customisation request are encoded directly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#combining-tooltip-and-hover-effect",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.6.5 Combining tooltip and hover effect",
    "text": "3.6.5 Combining tooltip and hover effect\nThere are times that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.6.6 Click effect with onclick",
    "text": "3.6.6 Click effect with onclick\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)     \n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.6.7 Coordinated Multiple Views with ggiraph",
    "text": "3.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.7.1 Creating an interactive scatter plot: plot_ly() method",
    "text": "3.7.1 Creating an interactive scatter plot: plot_ly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nThe plotThe code\n\n\n\n\n\n\n\n\nInteractive:\nClick on the colour symbol at the legend.\n\n\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.7.2 Working with visual variable: plot_ly() method",
    "text": "3.7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-ggplotly-method",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.7.3 Creating an interactive scatter plot: ggplotly() method",
    "text": "3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\nNotice that the only extra line you need to include in the code chunk is ggplotly()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.7.4 Coordinated Multiple Views with plotly",
    "text": "3.7.4 Coordinated Multiple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nThe plotThe code\n\n\n\n\n\n\n\n\nClick on a data point of one of the scatterplot and see how the corresponding point on the other scatterplot is selected.\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\nThing to learn from the code chunk:\n\nhighlight_key() simply creates an object of class crosstalk::SharedData.\nVisit this link to learn more about crosstalk,"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.8.1 Interactive Data Table: DT package",
    "text": "3.8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.8.2 Linked brushing: crosstalk method",
    "text": "3.8.2 Linked brushing: crosstalk method\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode chunk below is used to implement the coordinated brushing shown above.\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.9.1 ggiraph",
    "text": "3.9.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-for-r",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-for-r",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "3.9.2 plotly for R",
    "text": "3.9.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#basic-concepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#basic-concepts-of-animation",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "4.1.1 Basic concepts of animation",
    "text": "4.1.1 Basic concepts of animation\nIn the process of crafting animations, the plot itself remains static. Instead, numerous individual plots are constructed and subsequently assembled into sequences resembling movie frames, akin to the traditional method used in flip books or cartoons. Each frame represents a distinct plot capturing motion, constructed from a pertinent subset of the aggregated data. The interconnected frames, when combined, create the animated flow driven by the selected data subsets."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#terminology",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#terminology",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "4.1.2 Terminology",
    "text": "4.1.2 Terminology\nPrior to delving into the procedures for generating an animated statistical graph, it is crucial to familiarise ourselves with key concepts and terminology associated with this form of visualisation.\n\nFrame: Within an animated line graph, each frame corresponds to a distinct time point or category. As the frame transitions, the data points on the graph dynamically adjust to reflect the updated data.\nAnimation Attributes: These attributes encompass the settings dictating the behavior of the animation. For instance, one can specify the duration of each frame, the easing function facilitating transitions between frames, and whether the animation should commence from the current frame or from the outset.\n\n\n\n\n\n\n\nTip\n\n\n\nPrior to embarking on the creation of animated graphs, it is essential to consider whether the effort is justified. For exploratory data analysis, investing time in animated graphics might not be warranted. However, in a presentation setting, strategically incorporating a few well-designed animated graphics can significantly enhance the audience’s connection with your topic compared to static alternatives."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#loading-the-r-packages",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "4.2.1 Loading the R packages",
    "text": "4.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\npackage ‘gifski’ successfully unpacked and MD5 sums checked\nThe downloaded binary packages are in C:4R_packages package ‘gapminder’ successfully unpacked and MD5 sums checked\nThe downloaded binary packages are in C:4R_packages package ‘gganimate’ successfully unpacked and MD5 sums checked\nThe downloaded binary packages are in C:4R_packages"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-data",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "4.2.2 Importing the data",
    "text": "4.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate` of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-a-static-population-bubble-plot",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "4.3.1 Building a static population bubble plot",
    "text": "4.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-the-animated-bubble-plot",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "4.3.2 Building the animated bubble plot",
    "text": "4.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "4.4.1 Building an animated bubble plot: ggplotly() method",
    "text": "4.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe plotThe code\n\n\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\nThings to learn from code above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on Exercise 3: Programming Interactive Data Visualisation with R and Programming Animated Statistical Graphics with R",
    "section": "4.4.2 Building an animated bubble plot: plot_ly() method",
    "text": "4.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-ridgeline-graph-ggridges-method",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "4.4.1 Plotting ridgeline graph: ggridges method",
    "text": "4.4.1 Plotting ridgeline graph: ggridges method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#varying-fill-colours-along-the-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#varying-fill-colours-along-the-x-axis",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "4.4.2 Varying fill colours along the x axis",
    "text": "4.4.2 Varying fill colours along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colours or transparency but not both.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#mapping-the-probabilities-directly-onto-colour",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#mapping-the-probabilities-directly-onto-colour",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "4.4.3 Mapping the probabilities directly onto colour",
    "text": "4.4.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#ridgeline-plots-with-quantile-lines",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#ridgeline-plots-with-quantile-lines",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "4.4 Ridgeline plots with quantile lines",
    "text": "4.4 Ridgeline plots with quantile lines\nBy using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-a-half-eye-graph",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-a-half-eye-graph",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "4.5.1 Plotting a Half Eye graph",
    "text": "4.5.1 Plotting a Half Eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualisation, which is contains a half-density and a slab-interval.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#adding-the-boxplot-with-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#adding-the-boxplot-with-geom_boxplot",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "4.5.2 Adding the boxplot with geom_boxplot()",
    "text": "4.5.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#adding-the-dot-plots-with-stat_dots",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#adding-the-dot-plots-with-stat_dots",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "4.5.3 Adding the Dot Plots with stat_dots()",
    "text": "4.5.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#finishing-touch",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "4.5.4 Finishing touch",
    "text": "4.5.4 Finishing touch\nLastly, coord_flip() of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "5.3.1 Installing and launching R packages",
    "text": "5.3.1 Installing and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#one-sample-test-gghistostats-method",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "5.3.2 One-sample test: gghistostats() method",
    "text": "5.3.2 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\nlibrary(psych)\nlibrary(dplyr)\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#unpacking-the-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#unpacking-the-bayes-factor",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "5.3.3 Unpacking the Bayes Factor",
    "text": "5.3.3 Unpacking the Bayes Factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10.\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#how-to-interpret-bayes-factor",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#how-to-interpret-bayes-factor",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "5.3.4 How to Interpret Bayes Factor",
    "text": "5.3.4 How to Interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "5.3.5 Two-sample mean test: ggbetweenstats()",
    "text": "5.3.5 Two-sample mean test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#oneway-anova-test-ggbetweenstats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#oneway-anova-test-ggbetweenstats-method",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "5.3.6 Oneway ANOVA Test: ggbetweenstats() method",
    "text": "5.3.6 Oneway ANOVA Test: ggbetweenstats() method\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n“ns” → only non-significant\n“s” → only significant\n“all” → everything"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#significant-test-of-correlation-ggscatterstats",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "5.3.7 Significant Test of Correlation: ggscatterstats()",
    "text": "5.3.7 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#significant-test-of-association-depedence-ggbarstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#significant-test-of-association-depedence-ggbarstats-methods",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "5.3.8 Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "5.3.8 Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-excel-file-readxl-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-excel-file-readxl-methods",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "5.5.1 Importing Excel file: readxl methods",
    "text": "5.5.1 Importing Excel file: readxl methods\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\nNotice that the output object car_resale is a tibble data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#multiple-regression-model-using-lm",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#multiple-regression-model-using-lm",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "5.5.2 Multiple Regression Model using lm()",
    "text": "5.5.2 Multiple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#model-diagnostic-checking-for-multicolinearity",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#model-diagnostic-checking-for-multicolinearity",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "5.5.3 Model Diagnostic: checking for multicolinearity:",
    "text": "5.5.3 Model Diagnostic: checking for multicolinearity:\nIn the code chunk, check_collinearity() of performance package.\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#model-diagnostic-checking-normality-assumption",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#model-diagnostic-checking-normality-assumption",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "5.5.4 Model Diagnostic: checking normality assumption",
    "text": "5.5.4 Model Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#model-diagnostic-check-model-for-homogeneity-of-variances",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "5.5.5 Model Diagnostic: Check model for homogeneity of variances",
    "text": "5.5.5 Model Diagnostic: Check model for homogeneity of variances\nIn the code chunk, check_heteroscedasticity() of performance package.\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#model-diagnostic-complete-check",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#model-diagnostic-complete-check",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "5.5.6 Model Diagnostic: Complete check",
    "text": "5.5.6 Model Diagnostic: Complete check\nWe can also perform the complete by using check_model().\n\ncheck_model(model1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-regression-parameters-see-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-regression-parameters-see-methods",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "5.5.7 Visualising Regression Parameters: see methods",
    "text": "5.5.7 Visualising Regression Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\nplot(parameters(model1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-regression-parameters-ggcoefstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-regression-parameters-ggcoefstats-methods",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "5.5.8 Visualising Regression Parameters: ggcoefstats() methods",
    "text": "5.5.8 Visualising Regression Parameters: ggcoefstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "6.2.1 Installing and loading the packages",
    "text": "6.2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#data-import",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "6.2.2 Data import",
    "text": "6.2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "6.3.1 Plotting standard error bars of point estimates",
    "text": "6.3.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by race\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "6.3.2 Plotting confidence interval of point estimates",
    "text": "6.3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "6.3.3 Visualising the uncertainty of point estimates with interactive error bars",
    "text": "6.3.3 Visualising the uncertainty of point estimates with interactive error bars\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "6.4.1 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "6.4.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\nFor example, in the code chunk below the following arguments are used: - width = 0.95 - point = median - interval = qi\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "6.4.2 Visualising the uncertainty of point estimates: ggdist methods",
    "text": "6.4.2 Visualising the uncertainty of point estimates: ggdist methods\n\n\n\n\n\n\nYour turn\n\n\n\nMakeover the plot on previous slide by showing 95% and 99% confidence intervals.\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualising-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "6.4.3 Visualising the uncertainty of point estimates: ggdist methods",
    "text": "6.4.3 Visualising the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\n\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods-the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "7.4.1 FunnelPlotR methods: The basic plot",
    "text": "7.4.1 FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_type argument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods-makeover-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods-makeover-1",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "7.4.2 FunnelPlotR methods: Makeover 1",
    "text": "7.4.2 FunnelPlotR methods: Makeover 1\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods-makeover-2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods-makeover-2",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "7.4.3 FunnelPlotR methods: Makeover 2",
    "text": "7.4.3 FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-the-basic-derived-fields",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-the-basic-derived-fields",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "7.5.1 Computing the basic derived fields",
    "text": "7.5.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "7.5.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "7.5.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-a-static-funnel-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-a-static-funnel-plot",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "7.5.3 Plotting a static funnel plot",
    "text": "7.5.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands-on Exercise 4: Fundamentals of Visual Analytics",
    "section": "7.5.4 Interactive Funnel Plot: plotly + ggplot2",
    "text": "7.5.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "Within this section, we will explore various ggplot2 extensions that enhance the creation of refined and impactful statistical visuals. Upon completing this section, we will gain the ability to:\n\nPrecisely position annotations on a graph using functions from the ggrepel package.\nGenerate polished, publication-quality figures using functions from the ggthemes and hrbrthemes packages.\nConstruct composite figures by merging ggplot2 graphs with the patchwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-the-necessary-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-the-necessary-libraries",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.2.1 Importing the necessary libraries",
    "text": "2.2.1 Importing the necessary libraries\n\nggrepel is an R package that offers geoms for ggplot2, enabling the repulsion of overlapping text labels\nggthemes is an R package that offers additional themes, geoms, and scales for ‘ggplot2’\nhrbrthemes is an R package that offers typography-centric themes and theme components for ggplot2\npatchwork is an R package designed for creating composite figures using ggplot2\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.2.2 Importing data",
    "text": "2.2.2 Importing data\nThe exam_data tibble data frame comprises seven attributes in total.\n4 categorical data type:\n\nID\nCLASS\nGENDER\nRACE\n\n3 continuous data type:\n\nMATHS\nENGLISH\nSCIENCE\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.3.1 Working with ggrepel",
    "text": "2.3.1 Working with ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.4.1 Working with ggtheme package",
    "text": "2.4.1 Working with ggtheme package\nggthemes offers ‘ggplot2’ themes that emulate the visual style of plots created by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, The Wall Street Journal, and various others.\nIn the provided example, The Wall Street Journal theme is applied.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_wsj()\n\n\n\n\n\n\n\n\nAdditionally, ggthemes provides supplementary geoms and scales for ‘ggplot2’. To delve deeper into these features, refer to the accompanying vignette for more insights."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.4.2 Working with hrbthems package",
    "text": "2.4.2 Working with hrbthems package\nThe hrbrthemes package offers a foundational theme that prioritises typographic elements, determining the placement of labels and specifying the fonts utilised.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\nThe second objective revolves around enhancing productivity within a production workflow. Specifically, the elements of hrbrthemes are intended to be employed within the context of this “production workflow.” For more detailed information, refer to this [vignette]((https://cran.r-project.org/web/packages/hrbrthemes/vignettes/why_hrbrthemes.html).\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nWhat can we learn from the code chunk above?\n\naxis_title_size argument is used to increase the font size of the axis title to 18\nbase_size argument is used to increase the default axis label to 15\ngrid argument is used to remove the x-axis grid lines"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.5.1 Creating Composite Graphics: pathwork methods",
    "text": "2.5.1 Creating Composite Graphics: pathwork methods\nVarious functions from ggplot2 extensions cater to the requirements of preparing composite figures by combining multiple graphs. Examples include grid.arrange() from the gridExtra package and plot_grid() from the cowplot package. There is a ggplot2 extension called patchwork, specifically designed for merging separate ggplot2 graphs into a unified figure.\nThe patchwork package features a straightforward syntax, allowing for the easy creation of layouts. The general syntax includes:\n\nA Two-Column Layout using the Plus Sign +\nParentheses () to establish a subplot group\nA Two-Row Layout using the Division Sign /\n\nThis simplicity in syntax makes patchwork an efficient tool for combining ggplot2 graphs seamlessly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.5.2 Combining two ggplot2 graphs",
    "text": "2.5.2 Combining two ggplot2 graphs\nThe figure in the tabset below displays a composite of two histograms, seamlessly created using patchwork. Take note of the simplicity in the syntax employed to generate this plot!\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.5.3 Combining three ggplot2 graphs",
    "text": "2.5.3 Combining three ggplot2 graphs\nMore intricate composite figures can be constructed by employing appropriate operators. In the composite figure below, the following operators are utilised:\n\nThe | operator is used to stack two ggplot2 graphs vertically\nThe / operator is employed to position the plots next to each other horizontally\nThe () operator is utilised to define the sequence of the plotting operations\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\nTo delve deeper into this topic, please refer to the documentation on Plot Assembly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.5.4 Creating a composite figure with tag",
    "text": "2.5.4 Creating a composite figure with tag\nTo facilitate the identification of subplots in text, patchwork includes auto-tagging capabilities, as illustrated in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.5.5 Creating figure with insert",
    "text": "2.5.5 Creating figure with insert\nIn addition to offering functions for arranging plots based on a specified layout, patchwork introduces the inset_element() function. This feature allows the flexible placement of one or multiple plots or graphic elements on top or below another plot.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "2.5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "2.5.6 Creating a composite figure by using patchwork and ggtheme\nThe figure below is generated by combining patchwork with the theme_wsj() from the ggthemes package, which was discussed earlier.\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_wsj()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#importing-data",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "6.3.1 Importing Data",
    "text": "6.3.1 Importing Data\nFirst, let us import the data into R by using read_csv() of readr package.\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\nNotice that beside quality and type, the rest of the variables are numerical and continuous data type."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#building-a-basic-correlation-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#building-a-basic-correlation-matrix",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "6.4.1 Building a basic correlation matrix",
    "text": "6.4.1 Building a basic correlation matrix\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\npairs(wine[,2:12])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#drawing-the-lower-corner",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#drawing-the-lower-corner",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "6.4.2 Drawing the lower corner",
    "text": "6.4.2 Drawing the lower corner\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chun below.\n\npairs(wine[,2:12], lower.panel = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#including-with-correlation-coefficients",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#including-with-correlation-coefficients",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "6.4.3 Including with correlation coefficients",
    "text": "6.4.3 Including with correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\nDon’t worry about the details for now-just type this code into your R session or script. Let’s have more fun way to display the correlation matrix.\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#the-basic-plot",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "6.5.1 The basic plot",
    "text": "6.5.1 The basic plot\nOn of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#getting-started-with-corrplot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#getting-started-with-corrplot",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "6.7.1 Getting started with corrplot",
    "text": "6.7.1 Getting started with corrplot\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#working-with-visual-geometrics",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#working-with-visual-geometrics",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "6.7.2 Working with visual geometrics",
    "text": "6.7.2 Working with visual geometrics\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\n\n\n\nFeel free to change the method argument to other supported visual geometrics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#working-with-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#working-with-layout",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "6.7.3 Working with layout",
    "text": "6.7.3 Working with layout\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\n\nPlease feel free to experiment with other layout design argument such as tl.pos, tl.cex, tl.offset, cl.pos, cl.cex and cl.offset, just to mention a few of them."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#working-with-mixed-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#working-with-mixed-layout",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "6.7.4 Working with mixed layout",
    "text": "6.7.4 Working with mixed layout\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#combining-corrgram-with-the-significant-test",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#combining-corrgram-with-the-significant-test",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "6.7.5 Combining corrgram with the significant test",
    "text": "6.7.5 Combining corrgram with the significant test\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#reorder-a-corrgram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#reorder-a-corrgram",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "6.7.6 Reorder a corrgram",
    "text": "6.7.6 Reorder a corrgram\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#reordering-a-correlation-matrix-using-hclust",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#reordering-a-correlation-matrix-using-hclust",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "6.7.7 Reordering a correlation matrix using hclust",
    "text": "6.7.7 Reordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#importing-the-data-set",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#importing-the-data-set",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "7.3.1 Importing the data set",
    "text": "7.3.1 Importing the data set\nIn the code chunk below, read_csv() of readr is used to import WHData-2018.csv into R and parsed it into tibble R data frame format.\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\nThe output tibbled data frame is called wh."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#preparing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#preparing-the-data",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "7.3.2 Preparing the data",
    "text": "7.3.2 Preparing the data\nNext, we need to change the rows by country name instead of row number by using the code chunk below\n\nrow.names(wh) &lt;- wh$Country\n\nNotice that the row number has been replaced into the country name."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#transforming-the-data-frame-into-a-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#transforming-the-data-frame-into-a-matrix",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "7.3.3 Transforming the data frame into a matrix",
    "text": "7.3.3 Transforming the data frame into a matrix\nThe data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)\n\nNotice that wh_matrix is in R matrix format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#heatmap-of-r-stats",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#heatmap-of-r-stats",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "7.4.1 heatmap() of R Stats",
    "text": "7.4.1 heatmap() of R Stats\nIn this sub-section, we will plot a heatmap by using heatmap() of Base Stats. The code chunk is given below.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\nNote: By default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\nTo plot a cluster heatmap, we just have to use the default as shown in the code chunk below.\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\nNote: The order of both rows and columns is different compare to the native wh_matrix. This is because heatmap do a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.\nHere, red cells denotes small values, and red small ones. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, we need to normalize this matrix. This is done using the scale argument. It can be applied to rows or to columns following your needs.\nThe code chunk below normalises the matrix column wise.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))\n\n\n\n\n\n\n\n\nNotice that the values are scaled now. Also note that margins argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#working-with-heatmaply",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#working-with-heatmaply",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "7.5.1 Working with heatmaply",
    "text": "7.5.1 Working with heatmaply\n\nheatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\nNote that:\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#data-trasformation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#data-trasformation",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "7.5.2 Data trasformation",
    "text": "7.5.2 Data trasformation\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentilse.\n\n7.5.2.1 Scaling method\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale variable values columnwise.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n7.5.2.2 Normalising method\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n7.5.2.3 Percentising method\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#clustering-algorithm",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#clustering-algorithm",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "7.5.3 Clustering algorithm",
    "text": "7.5.3 Clustering algorithm\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#manual-approach",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#manual-approach",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "7.5.4 Manual approach",
    "text": "7.5.4 Manual approach\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#statistical-approach",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#statistical-approach",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "7.5.5 Statistical approach",
    "text": "7.5.5 Statistical approach\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\nFirst, the dend_expend() will be used to determine the recommended clustering method to be used.\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#seriation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#seriation",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "7.5.6 Seriation",
    "text": "7.5.6 Seriation\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nThe option “mean” gives the output we would get by default from heatmap functions in other packages such as gplots::heatmap.2.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#working-with-colour-palettes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#working-with-colour-palettes",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "7.5.7 Working with colour palettes",
    "text": "7.5.7 Working with colour palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#the-finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#the-finishing-touch",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "7.5.8 The finishing touch",
    "text": "7.5.8 The finishing touch\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsize_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#plotting-a-simple-parallel-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#plotting-a-simple-parallel-coordinates",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "8.4.1 Plotting a simple parallel coordinates",
    "text": "8.4.1 Plotting a simple parallel coordinates\nCode chunk below shows a typical syntax used to plot a basic static parallel coordinates plot by using ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#plotting-a-parallel-coordinates-with-boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#plotting-a-parallel-coordinates-with-boxplot",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "8.4.2 Plotting a parallel coordinates with boxplot",
    "text": "8.4.2 Plotting a parallel coordinates with boxplot\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#parallel-coordinates-with-facet",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#parallel-coordinates-with-facet",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "8.4.3 Parallel coordinates with facet",
    "text": "8.4.3 Parallel coordinates with facet\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#rotating-x-axis-text-label",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#rotating-x-axis-text-label",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "8.4.4 Rotating x-axis text label",
    "text": "8.4.4 Rotating x-axis text label\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below:\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#adjusting-the-rotated-x-axis-text-label",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#adjusting-the-rotated-x-axis-text-label",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "8.4.5 Adjusting the rotated x-axis text label",
    "text": "8.4.5 Adjusting the rotated x-axis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#the-basic-plot-1",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#the-basic-plot-1",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "8.5.1 The basic plot",
    "text": "8.5.1 The basic plot\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\nNotice that some of the axis labels are too long. You will learn how to overcome this problem in the next step."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#rotate-axis-label",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#rotate-axis-label",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "8.5.2 Rotate axis label",
    "text": "8.5.2 Rotate axis label\nIn the code chunk below, rotateTitle argument is used to avoid overlapping axis labels.\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\nOne of the useful interactive feature of parallelPlot is we can click on a variable of interest, for example Happiness score, the monotonous blue colour (default) will change a blues with different intensity colour scheme will be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#changing-the-colour-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#changing-the-colour-scheme",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "8.5.3 Changing the colour scheme",
    "text": "8.5.3 Changing the colour scheme\nWe can change the default blue colour scheme by using continousCS argument as shown in the code chunk below.\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#parallel-coordinates-plot-with-histogram",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05p2.html#parallel-coordinates-plot-with-histogram",
    "title": "Hands-on Exercise 5: Visual Multivariate Analysis",
    "section": "8.5.4 Parallel coordinates plot with histogram",
    "text": "8.5.4 Parallel coordinates plot with histogram\nIn the code chunk below, histoVisibility argument is used to plot histogram along the axis of each variables.\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This chapter introduces fundamental principles and key elements of ggplot2. We will simultaneously acquire practical skills in utilising these elements to generate statistical graphics, following the principles of the Layered Grammar of Graphics. By the conclusion of this chapter, we will have the ability to employ ggplot2’s essential graphical components to craft sophisticated and functional statistical visuals."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "1.2.1 Install and launching R packages",
    "text": "1.2.1 Install and launching R packages\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "1.2.2 Importing the data",
    "text": "1.2.2 Importing the data\nWe bring exam_data.csv into the R environment using the read.csv() function and then assign it to the variable exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nIn R, the conventional format for creating objects and assignment statements is as follows:\n\nobject_name &lt;- value\n\nWe can use glimpse( ) and summary( ) to quickly inspect exam_data.\n\nglimpse(exam_data)\n\nRows: 322\nColumns: 7\n$ ID      &lt;chr&gt; \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   &lt;chr&gt; \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  &lt;chr&gt; \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    &lt;chr&gt; \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH &lt;dbl&gt; 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   &lt;dbl&gt; 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE &lt;dbl&gt; 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n\n\n\nsummary(exam_data)\n\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "1.31 R Graphics vs ggplot",
    "text": "1.31 R Graphics vs ggplot\nLet’s examine the differences in how R Graphics, encompassing the fundamental graphical functions of Base R, and ggplot2, create a basic histogram.\n\nBase Rggplot\n\n\n\nhist(exam_data$MATHS, col = '#5e82c9')\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill='#5e82c9') +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nWhile the code is more straightforward with R Graphics, Hadley Wickham emphasises that the valuable skills gained from ggplot2 extend beyond mere plotting syntax. Instead, they involve adopting a potent mindset for visualization, considering it as a method to map between variables and the visual characteristics of geometric objects that are perceptible.\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-simple-bar-chart",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#plotting-a-simple-bar-chart",
    "title": "Hands-on Exercise 1",
    "section": "Plotting a simple bar chart",
    "text": "Plotting a simple bar chart\n\nggplot(data = exam_data, \n      aes(x = RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "title": "Hands-on Exercise 1",
    "section": "1.7.1 Geometric Objects: geom_bar()",
    "text": "1.7.1 Geometric Objects: geom_bar()\nThe code chunk below plots a bar chart by using geom_bar(https://ggplot2.tidyverse.org/reference/geom_bar.html).\naes(x=RACE) defines “RACE” as the x-axis.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "title": "Hands-on Exercise 1",
    "section": "1.7.2 Geometric Objects: geom_dotplot()",
    "text": "1.7.2 Geometric Objects: geom_dotplot()\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nBelow, we use geom_dotplot() to plot a dot plot of math scores.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis,\nand binwidth argument is used to change the binwidth to 2.5.\n\n\n\nWe insert 2 additional arguments in geom_dotplot()\n\n‘binwidth’ which refers to group ranges\n‘dotsize’ which scales the size of the dots.\n\nThe function scale_y_continuous() is also added to turn off the y-axis by setting it to NULL.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5,\n               color=\"black\", \n               fill='#5e82c9') +\n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "title": "Hands-on Exercise 1",
    "section": "1.7.3 Geometric Objects: geom_histogram()",
    "text": "1.7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-on Exercise 1",
    "section": "1.7.4 Modifying a geometric object by changing geom()",
    "text": "1.7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-on Exercise 1",
    "section": "1.7.5 Modifying a geometric object by changing aes",
    "text": "1.7.5 Modifying a geometric object by changing aes\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "title": "Hands-on Exercise 1",
    "section": "1.7.6 Geometric objects: geom-density()",
    "text": "1.7.6 Geometric objects: geom-density()\ngeom-density computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "title": "Hands-on Exercise 1",
    "section": "1.7.7 Geometric objects: geom_boxplot",
    "text": "1.7.7 Geometric objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually. The code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_viloin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_viloin",
    "title": "Hands-on Exercise 1",
    "section": "1.7.8 Geometric objects: geom_viloin",
    "text": "1.7.8 Geometric objects: geom_viloin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "title": "Hands-on Exercise 1",
    "section": "1.7.9 Geometric objects: geom_point()",
    "text": "1.7.9 Geometric objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point-1",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point-1",
    "title": "Hands-on Exercise 1",
    "section": "1.7.10 Geometric objects: geom_point()",
    "text": "1.7.10 Geometric objects: geom_point()\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "title": "Hands-on Exercise 1",
    "section": "1.8.1 Working with stat()",
    "text": "1.8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "Hands-on Exercise 1",
    "section": "1.8.2 Working with stat - the stat_summary() method",
    "text": "1.8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "Hands-on Exercise 1",
    "section": "1.8.3 Working with stat - the geom() method",
    "text": "1.8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-on Exercise 1",
    "section": "1.8.4 Adding a best fit curve on a scatterplot?",
    "text": "1.8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess.\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "Hands-on Exercise 1",
    "section": "1.9.1 Working with facet_wrap()",
    "text": "1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "title": "Hands-on Exercise 1",
    "section": "1.9.2 facet_grid() function",
    "text": "1.9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "Hands-on Exercise 1",
    "section": "1.10.1 Working with Coordinate",
    "text": "1.10.1 Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1",
    "section": "1.10.2 Changing the y- and x-axis range",
    "text": "1.10.2 Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "title": "Hands-on Exercise 1",
    "section": "1.11.1 Working with theme",
    "text": "1.11.1 Working with theme\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "As indicated by the office report and the accompanying infographic:\n\nThe average daily temperatures are expected to rise by 1.4 to 4.6 degrees, and\nThe difference in precipitation between the wet season (November to January) and the dry season (February and June to September) is anticipated to become more distinct.\n\n\n\n\n\nFor this take-home assignment, we are tasked to:\n\nSelect a weather station and retrieve historical daily data on temperature or rainfall from the website of the Meteorological Service Singapore.\nChoose records of daily temperature or rainfall for a month from the years 1983, 1993, 2003, 2013, and 2023, and then craft a data visualisation driven by analytics.\nIncorporate suitable interactive features to improve the experience of users in exploring data and/or in visual storytelling.\n\nFor this take home exercise 3, we have chosen the Changi weather station and decided to focus on the daily temperature data for the month of February across the years 1983, 1993, 2003, 2013, and 2023 to examine the hypothesis suggesting an increase in daily average temperatures between 1.4 to 4.6 degrees Celsius."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#setting-the-scene-for-this-take-home-exercise",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#setting-the-scene-for-this-take-home-exercise",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "As indicated by the office report and the accompanying infographic:\n\nThe average daily temperatures are expected to rise by 1.4 to 4.6 degrees, and\nThe difference in precipitation between the wet season (November to January) and the dry season (February and June to September) is anticipated to become more distinct."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#the-task",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#the-task",
    "title": "Take-home Exercise 3",
    "section": "",
    "text": "For this take-home assignment, we are tasked to:\n\nSelect a weather station and retrieve historical daily data on temperature or rainfall from the website of the Meteorological Service Singapore.\nChoose records of daily temperature or rainfall for a month from the years 1983, 1993, 2003, 2013, and 2023, and then craft a data visualisation driven by analytics.\nIncorporate suitable interactive features to improve the experience of users in exploring data and/or in visual storytelling.\n\nFor this take home exercise 3, we have chosen the Changi weather station and decided to focus on the daily temperature data for the month of February across the years 1983, 1993, 2003, 2013, and 2023 to examine the hypothesis suggesting an increase in daily average temperatures between 1.4 to 4.6 degrees Celsius."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#loading-necessary-r-packages",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#loading-necessary-r-packages",
    "title": "Take-home Exercise 3",
    "section": "2.1 Loading Necessary R packages",
    "text": "2.1 Loading Necessary R packages\nWe will utilise the following packages:\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\nggthemes is an R package that offers additional themes, geoms, and scales for ‘ggplot2’\n\nThe code which loads the R packages:\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse, dplyr, ggthemes)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#import-dataset",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#import-dataset",
    "title": "Take-home Exercise 3",
    "section": "2.2 Import dataset",
    "text": "2.2 Import dataset\nOf course our next step involves importing the dataset. As mentioned earlier, we will be analysing data from the Changi weather stations for the year 1983, 1993, 2003, 2013 and 2023.\nFirstly, we need to import the 5 csv files using read_csv. We want to read and combine all the files as feb_combined since they all the files have the common column names and same number of columns.\nAlso, we have found out that the 2023 dataset, latin characters are present on some of the columns.\n\nï..Station\n“Mean.Temperature..Â.C.”\n“Maximum.Temperature..Â.C.”\n“Minimum.Temperature..Â.C.”\n\nSince we are only focusing on temperature data, we will discard the columns related to rainfall and windspeed. Also, I will rename these columns below accordingly.\n\nMean Temperature (°C) -&gt; meantemp\nMaximum Temperature (°C) -&gt; maxtemp\nMinimum Temperature (°C) -&gt; mintemp\n\nThen I also will create a new column to find out the difference between the maxtemp and mintemp on a daily basis.\nThe following code snippet will outline the sequential steps we will undertake:\n\nlibrary(dplyr)\n\n# Function to read and preprocess each file\nread_and_preprocess &lt;- function(file_path, encoding = \"latin1\", is_2023 = FALSE) {\n  data &lt;- read.csv(file_path, fileEncoding = encoding)\n  \n  # If the file is for the year 2023, rename columns with encoding issues\n  if(is_2023) {\n    data &lt;- rename(data, \n                   Station = `ï..Station`, \n                   `Mean.Temperature...C.` = `Mean.Temperature..Â.C.`,\n                   `Maximum.Temperature...C.` = `Maximum.Temperature..Â.C.`,\n                   `Minimum.Temperature...C.` = `Minimum.Temperature..Â.C.`)\n  }\n  \n  # Select and rename columns for consistency\n  data %&gt;%\n    select(Station, Year, Month, Day, `Mean.Temperature...C.`, `Maximum.Temperature...C.`, `Minimum.Temperature...C.`) %&gt;%\n    rename(meantemp = `Mean.Temperature...C.`, \n           maxtemp = `Maximum.Temperature...C.`, \n           mintemp = `Minimum.Temperature...C.`) %&gt;%\n    mutate(difftemp = maxtemp - mintemp)\n}\n\n# Read and preprocess each file, with special handling for the 2023 file\nfeb_combined &lt;- bind_rows(\n  read_and_preprocess(\"data/CHANGI_FEB1983.csv\"),\n  read_and_preprocess(\"data/CHANGI_FEB1993.csv\"),\n  read_and_preprocess(\"data/CHANGI_FEB2003.csv\"),\n  read_and_preprocess(\"data/CHANGI_FEB2013.csv\"),\n  read_and_preprocess(\"data/CHANGI_FEB2023.csv\", is_2023 = TRUE)\n)\n\nAfterwards, we want to find out the average temperature across the years. We will name this column yearly_avg_temp.\n\n# Add a new column with the mean temperature for each year\nfeb_combined &lt;- feb_combined %&gt;%\n  group_by(Year) %&gt;%\n  mutate(yearly_avg_temp = mean(meantemp, na.rm = TRUE)) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nNote\n\n\n\nThe code below is to display the combined file:\n\nDT::datatable(feb_combined, class= \"compact\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#scatterplot",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#scatterplot",
    "title": "Take-home Exercise 3",
    "section": "3.1 Scatterplot",
    "text": "3.1 Scatterplot\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\np1 &lt;- ggplot(feb_combined, aes(x = as.Date(paste(Year, Month, Day, sep=\"-\")), y = meantemp)) +\n  geom_point(aes(text = paste(\"Date:\", paste(Year, Month, Day, sep=\"-\"), \"\\nTemp:\", meantemp, \"°C\")), size = 2, color = \"blue\") + # Keep points for daily temperatures\n  geom_line(data = feb_combined, aes(x = as.Date(paste(Year, Month, Day, sep=\"-\")), y = yearly_avg_temp, group = 1), color = \"red\", size = 0.5) + # Keep the red line for yearly average temperatures\n  scale_x_date(breaks = as.Date(c(\"1983-02-01\", \"1993-02-01\", \"2003-02-01\", \"2013-02-01\", \"2023-02-01\")),\n               labels = c(\"1983\", \"1993\", \"2003\", \"2013\", \"2023\"),\n               date_labels = \"%Y\") +\n  labs(title = \"Daily and Yearly Mean Temperature Over Years\",\n       x = \"Year\",\n       y = \"Temperature (°C)\") +\n  theme_minimal()\n\n# Convert to interactive plotly plot\ninteractive_p1 &lt;- ggplotly(p1, tooltip = \"text\")\n\n# Display the plot\ninteractive_p1\n\n\n\n\nThis scatter plot visualises two types of temperature data over a span of several years, from before 1983 to 2023:\n\nDaily Mean Temperature (Blue Dots): Each blue dot represents the mean temperature recorded on a specific day. The vertical axis shows the temperature in degrees Celsius (°C), while the horizontal axis represents the years. The exact date and temperature are displayed when you hover over a blue dot, as shown in the tooltip for the date 2003-2-23 with a mean temperature of 27.5 °C.\nAverage Annual Temperature (Red Line): The red line indicates the trend of the average annual temperature over the years. It appears to have a fluctuating pattern, with some years being warmer on average than others.\n\nThe scatter plot also suggests a wide range of daily temperatures within any given year, as seen by the vertical spread of blue dots for each year. The red line helps to identify whether there is an overall trend of increasing or decreasing average temperatures, which could be an indicator of climate patterns or changes. The plot is a useful way to visually compare daily temperatures to the average trend over a long time period.\n\n\n\n\n\n\nWhy is interactivity beneficial here?\n\n\n\n\nDetailed Information on Demand: The ability to hover over individual data points to obtain specific information (such as the exact date and temperature) allows us users to explore the data in depth without overwhelming the visual presentation. In the provided scatter plot above, this means we can see the exact temperature on a given day, which is crucial for detailed analysis or for identifying outliers and anomalies.\nClarity in a Dense Plot: With many data points, a static scatter plot can become cluttered and difficult to read. Interactivity allows us users to focus on individual points of interest without being distracted by the sheer volume of data.\nTrend Identification: By interacting with the data points along the trend line, we can observe how the annual average temperature changes over time, making it easier to spot patterns such as warming or cooling trends."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#lineplot",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#lineplot",
    "title": "Take-home Exercise 3",
    "section": "3.2 Lineplot",
    "text": "3.2 Lineplot\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n# Create the interactive line plot with customised hover text and x-axis ticks\np &lt;- plot_ly(data = feb_combined, x = ~Year, y = ~yearly_avg_temp, type = 'scatter', mode = 'lines+markers',\n             marker = list(size = 10, color = 'red'), line = list(color = 'red'),\n             hovertemplate = paste(\"Year: %{x}&lt;br&gt;Temperature: %{y} °C&lt;extra&gt;&lt;/extra&gt;\")) %&gt;%\n  layout(title = \"Yearly Average Temperatures (1983, 1993, 2003, 2013, 2023)\",\n         xaxis = list(title = \"Year\", \n                      tickvals = c(\"1983\", \"1993\", \"2003\", \"2013\", \"2023\"), # Specify which ticks to show\n                      ticktext = c(\"1983\", \"1993\", \"2003\", \"2013\", \"2023\")), # Specify labels for the ticks\n         yaxis = list(title = \"Yearly Average Temperature (°C)\"),\n         hovermode = \"closest\")\n\n# Render the plot with specified x-axis ticks\np\n\n\n\n\n\n\n\n\n\n\nKey Findings:\n\n\n\n\nInitial Point (1983): The graph starts at a peak with the average annual temperature recorded at 28.06 °C in 1983. This represents the highest recorded temperature over the 40-year span depicted.\nFirst Decade Drop (1993): There is a sharp decline over the next decade to 26.71 °C in 1993. This decrease of approximately 1.35 °C is quite significant, suggesting a notable cooling period during these ten years.\nRecovery Phase (2003): The year 2003 shows a rebound with the temperature rising to 27.09 °C. Although this is an increase of about 0.38 °C from 1993, it’s still below the starting temperature in 1983 by nearly 1 °C.\nLowest Point (2013): The year 2013 marks the lowest temperature on the plot at 26.53 °C. This further decrease suggests a continuation of the cooling trend, with temperatures dropping by approximately 0.56 °C from 2003 and 1.53 °C from 1983.\nPartial Recovery (2023): By 2023, the temperature rises again to 26.95 °C. This increase of 0.42 °C from 2013 indicates a slight warming trend. However, the temperature in 2023 is still below the initial 1983 temperature by 1.11 °C.\n\n\n\nThe overall trend appears to be a downward trajectory from 1983 to 2013 with a slight increase in 2023. However, the graph does not show a simple linear decrease; rather, it fluctuates, suggesting variability in average temperatures over time. This could be due to a variety of natural climatic cycles or other environmental factors influencing average temperatures."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#heatmap",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#heatmap",
    "title": "Take-home Exercise 3",
    "section": "3.3 Heatmap",
    "text": "3.3 Heatmap\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\n# Ensure 'Year' is treated as a factor with only display the 5 years\nfeb_combined$Year &lt;- factor(feb_combined$Year, levels = c(\"1983\", \"1993\", \"2003\", \"2013\", \"2023\"))\n\n# Create the heat map with ggplot, specifying y-axis breaks\np &lt;- ggplot(feb_combined, aes(x = Day, y = Year, fill = meantemp)) + \n  geom_tile(color = \"white\", size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + # Using Tufte theme for a clean look\n  scale_fill_gradient(name = \"°C\", low = \"lightyellow\", high = \"red\") + # Adjust colour gradient\n  scale_y_discrete(limits = c(\"1983\", \"1993\", \"2003\", \"2013\", \"2023\")) + # Specify y-axis to show only these years\n  labs(x = NULL, \n       y = NULL, \n       title = \"Daily Mean Temperature in Changi for February\") +\n  theme(axis.ticks = element_blank(),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 10),\n        legend.text = element_text(size = 8))\n\n# Convert the ggplot object to an interactive plotly object\ninteractive_p &lt;- ggplotly(p)\n\n# Display the interactive plot\ninteractive_p\n\n\n\n\nThis heatmap visualises the daily mean temperatures for the month of February across five different years: 1983, 1993, 2003, 2013, and 2023.\n\nThe X-axis represents the days of February, ranging from 1 to 28.\nThe Y-axis lists the years in descending order, with 2023 at the top and 1983 at the bottom.\nEach cell in the heatmap corresponds to a specific day in February for a given year.\nThe colour of each cell indicates the mean temperature for that day, according to the colour scale on the right side of the heatmap. The scale ranges from light colours (cooler temperatures) to dark colours (warmer temperatures). Lighter shades of the colour represent cooler temperatures, closer to 25°C, while darker shades signify warmer temperatures, approaching 28°C.\n\nFor instance, if one were to hover over a particular cell:\n\nThe day would be indicated.\nThe year would be shown.\nThe mean temperature for that specific day and year would be displayed.\n\nWith reference to the image below, we can hover over the 27th February 2024 with a mean temperature of 26.7°C.\n\nThe heatmap shows variations in temperature across different days and years at a glance. Warmer days are immediately noticeable with darker colours, while cooler days are indicated by lighter colours. One can observe patterns such as particularly warm or cool periods during February for each year and compare the overall temperature profile across years. It seems there are fluctuations in temperature from year to year, with some years having wider spreads of temperatures throughout the month, while others show more uniformity.\n\n\n\n\n\n\nWhy is interactivity useful here?\n\n\n\nInteractivity functionality in a heatmap, such as the ability to hover over cells to display specific data points, is particularly useful for several reasons:\nPrecision: While the colour gradations indicate temperature differences, precise values cannot be determined solely by sight, especially when dealing with a colour spectrum. Hovering to get exact figures allows for accurate data interpretation.\nDetail: A heatmap can only show so much detail at once. Interactivity allows users to delve into the data, seeing the exact mean temperature for any day of interest without overcrowding the visual with numbers.\nComparison: It enables quick and easy comparisons between different days or years. Users can hover over various parts of the heatmap to compare specific data points without referring to a legend or scale repeatedly.\nUser Engagement: Interactivity increases user engagement. Users who can interact with the data are more likely to spend time understanding the trends and anomalies presented.\nAccessibility: For those with colour vision deficiencies, distinguishing between colours might be challenging. Interactive elements that display numerical data can make the information accessible to a wider audience."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#box-plot-across-5-years",
    "href": "Take-home_Ex/Take-home_Ex03/Take-home_Ex03.html#box-plot-across-5-years",
    "title": "Take-home Exercise 3",
    "section": "3.4 Box Plot across 5 years",
    "text": "3.4 Box Plot across 5 years\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\n\nfeb_combined$Year &lt;- as.factor(feb_combined$Year)\n\n# Create the Plotly Box Plot\np &lt;- plot_ly(feb_combined, y = ~`meantemp`, x = ~Year, type = 'box',\n             color = ~Year, \n             hoverinfo = 'y+x') %&gt;%\n  layout(title = \"Box Plot of Daily Mean Temperatures for February Over Decades\",\n         xaxis = list(title = \"Year\"),\n         yaxis = list(title = \"Mean Temperature (°C)\"))\n\n# Display the plot\np\n\n\n\n\nThe box plot illustrates the distribution of daily mean temperatures for the month of February over five distinct years: 1983, 1993, 2003, 2013, and 2023. For each year, the data is summarised as follows:\n\n\n\n\n\n\nKey Findings\n\n\n\n1983:\n\nThe maximum daily mean temperature reached 28.8°C.\nThe upper quartile (Q3) temperature was 28.55°C, indicating that 75% of the days had a mean temperature of 28.55°C or lower.\nThe median temperature was 28.1°C, which is the midpoint of the data.\nThe lower quartile (Q1) temperature was 27.75°C, suggesting that 25% of the days had a mean temperature below this value.\nThe minimum temperature recorded was 26.8°C.\n\n1993:\n\nThe temperatures peaked at 27.5°C.\nThe third quartile was observed at 27°C.\nThe median temperature for this year was slightly lower at 26.75°C.\nThe first quartile was marked at 26.45°C.\nThere was a notable outlier at 25.5°C, which was significantly lower than the expected range.\n\n2003:\n\nThe highest daily mean temperature noted was 28.2°C.\nThe temperature at the third quartile was 27.77°C.\nThe median temperature was 27.35°C.\nThe first quartile temperature came in at 26.45°C.\nThe lowest temperature recorded for the month was 25.3°C.\n\n2013:\n\nThe maximum temperature reached a similar level as in 2003, at 28.3°C.\nThe upper quartile temperature decreased to 27.2°C.\nThe median temperature was 26.64°C, indicating a slight decrease from 2003.\nThe lower quartile was at 26°C. - The minimum temperature dropped to 24.6°C, showing a significant decrease from previous years.\n\n2023:\n\nThe highest temperature observed was 28°C.\nThe third quartile temperature was at 27.5°C.\nThe median temperature was 27.05°C, suggesting a slight uptick from 2013. - The first quartile was at 26.7°C.\nThe minimum temperature saw a slight increase from the previous decade at 24.9°C, with a noticeable outlier just below the lower fence of 25.6°C.\n\n\n\nFrom 1983 to 2023, there’s a noticeable fluctuation in temperatures with both the median and the interquartile range varying from year to year. The median temperature appears to show slight variations, without a clear upward or downward trend. However, there is evidence of increasing variability in temperatures, as seen in the wider interquartile ranges in the later years, particularly in 2023."
  }
]