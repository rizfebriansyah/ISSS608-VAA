---
title: "Hands-on Exercise 5: Visual Multivariate Analysis"
author: "Rizqi Febriansyah"
date: "3 February 2023"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

# Part One: **Creating Ternary Plot with R**

# 5.1 Learning Outcome

Ternary plots offer a method to visualise and understand the distribution and variation of data comprising three components. For instance, they can represent the percentages of an aging, economically active and youthful population, or the composition of sand, silt and clay in soil. The visualisation takes the form of a triangle, with its sides ranging from 0 to 1, where each side corresponds to one of the three elements. By plotting a point and drawing perpendicular lines from it to the triangle's sides, the intersection points reveal the component values.

In this practical session, we'll learn to create ternary plots using R, focusing on the population structure of Singapore.

The exercise includes four key steps:

1.  Installation and initiation of the **tidyverse** and \***ggtern** packages.
2.  Creation of three new variables using the mutate() function from the **dplyr** package.
3.  Construction of a static ternary plot with the ggtern() function from the **ggtern** package.
4.  Development of an interactive ternary plot using the plot_ly() function from the **Plotly R** package.

# 5.2 Getting Started

In this hands-on session, we'll be utilising two primary R packages:

-   [**ggtern**](http://www.ggtern.com/): This is an extension of ggplot, specifically designed for creating ternary diagrams. It allows for the plotting of static ternary plots.
-   [**Plotly R**](https://plot.ly/r/): This package facilitates the creation of interactive web-based charts using plotly's JavaScript library, plotly.js. Within the Plotly R package, the `ggplotly` function is notable for its ability to transform ggplot2 figures into interactive Plotly objects.

Additionally, it's important to install and load select packages from the tidyverse suite, including `readr`, `dplyr`, and `tidyr`.

Please note that for this exercise, we will install version 3.2.1 of ggplot2 instead of its latest version. This specific version is required as the current iteration of the ggtern package does not support the newest version of ggplot2.

The following code snippet will accomplish the task:

```{r}
pacman::p_load(plotly, ggtern, tidyverse)
```

# 5.3 Data Prep

## 5.3.1 Our dataset

In this practical exercise, we will utilise the dataset titled ["Singapore Residents by Planning Area/Subzone, Age Group, Sex, and Type of Dwelling, June 2000-2018.](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data)" This dataset has already been downloaded and is stored in the 'data' sub-folder within the exercise folder. The file is named `respopagsex2000to2018_tidy.csv` and is available in CSV format.

## 5.3.2 Importing Data

To import 'respopagsex2000to2018_tidy.csv' into R, `read_csv()` function of **readr** package will be used.

```{r}
#Reading the data into R environment
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv") 
```

## 5.3.3 Preparing the Data

Next, use the `mutate()` function of **dplyr** package to derive three new measures, namely: young, active, and old.

```{r}
#Deriving the young, economy active and old measures
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year))%>%
  spread(AG, Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))  %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)
```

# 5.4 Plotting Ternary Diagram with R

## 5.4.1 Plotting a static ternary diagram

Use ggtern() function of ggtern package to create a simple ternary plot.

```{r}
#Building the static ternary plot
ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point()
```

```{r}
#Building the static ternary plot
ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point() +
  labs(title="Population structure, 2015") +
  theme_rgbw()
```

## 5.4.2 Plotting an interactive ternary diagram

The code below create an interactive ternary plot using `plot_ly()` function of Plotly R.

```{r}
# reusable function for creating annotation object
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, y = 1,
    ax = 0, ay = 0,
    xref = "paper", yref = "paper", 
    align = "center",
    font = list(family = "serif", size = 15, color = "white"),
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  )
}

# reusable function for axis formatting
axis <- function(txt) {
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  )
}

ternaryAxes <- list(
  aaxis = axis("Young"), 
  baxis = axis("Active"), 
  caxis = axis("Old")
)

# Initiating a plotly visualization 
plot_ly(
  agpop_mutated, 
  a = ~YOUNG, 
  b = ~ACTIVE, 
  c = ~OLD, 
  color = I("black"), 
  type = "scatterternary"
) %>%
  layout(
    annotations = label("Ternary Markers"), 
    ternary = ternaryAxes
  )
```
