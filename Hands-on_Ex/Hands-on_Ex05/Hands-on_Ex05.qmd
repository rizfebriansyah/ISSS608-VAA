---
title: "Hands-on Exercise 5: Visual Multivariate Analysis"
author: "Rizqi Febriansyah"
date: "3 February 2023"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

# Part One: **Creating Ternary Plot with R**

# 5.1 Learning Outcome

Ternary plots offer a method to visualise and understand the distribution and variation of data comprising three components. For instance, they can represent the percentages of an aging, economically active and youthful population, or the composition of sand, silt and clay in soil. The visualisation takes the form of a triangle, with its sides ranging from 0 to 1, where each side corresponds to one of the three elements. By plotting a point and drawing perpendicular lines from it to the triangle's sides, the intersection points reveal the component values.

In this practical session, we'll learn to create ternary plots using R, focusing on the population structure of Singapore.

The exercise includes four key steps:

1.    Installation and initiation of the **tidyverse** and ***ggtern** packages.
2.    Creation of three new variables using the mutate() function from the **dplyr** package.
3.    Construction of a static ternary plot with the ggtern() function from the **ggtern** package.
4.    Development of an interactive ternary plot using the plot_ly() function from the **Plotly R** package.

# 5.2 Getting Started

In this hands-on session, we'll be utilising two primary R packages:

-   [**ggtern**](http://www.ggtern.com/): This is an extension of ggplot, specifically designed for creating ternary diagrams. It allows for the plotting of static ternary plots.
-   [**Plotly R**](https://plot.ly/r/): This package facilitates the creation of interactive web-based charts using plotlyâ€™s JavaScript library, plotly.js. Within the Plotly R package, the `ggplotly` function is notable for its ability to transform ggplot2 figures into interactive Plotly objects.

Additionally, it's important to install and load select packages from the tidyverse suite, including `readr`, `dplyr`, and `tidyr`.

Please note that for this exercise, we will install version 3.2.1 of ggplot2 instead of its latest version. This specific version is required as the current iteration of the ggtern package does not support the newest version of ggplot2.

The following code snippet will accomplish the task:
```{r}
pacman::p_load(plotly, ggtern, tidyverse)
```

# 5.3 Data Prep
## 5.3.1 Our dataset
In this practical exercise, we will utilise the dataset titled ["Singapore Residents by Planning Area/Subzone, Age Group, Sex, and Type of Dwelling, June 2000-2018.](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data)" This dataset has already been downloaded and is stored in the 'data' sub-folder within the exercise folder. The file is named `respopagsex2000to2018_tidy.csv` and is available in CSV format.

## 5.3.2 Importing Data
To import 'respopagsex2000to2018_tidy.csv' into R,  `read_csv()` function of **readr** package will be used.

```{r}
#Reading the data into R environment
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv") 
```

## 5.3.3 Preparing the Data
Next, use the `mutate()` function of **dplyr** package to derive three new measures, namely: young, active, and old.
```{r}
#Deriving the young, economy active and old measures
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year))%>%
  spread(AG, Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))  %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)
```

# 5.4 Plotting Ternary Diagram with R
## 5.4.1 Plotting a static ternary diagram
Use ggtern() function of ggtern package to create a simple ternary plot.

```{r}
#Building the static ternary plot
ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point()
```

```{r}
#Building the static ternary plot
ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point() +
  labs(title="Population structure, 2015") +
  theme_rgbw()
```


## 5.4.2 Plotting an interactive ternary diagram
The code below create an interactive ternary plot using `plot_ly()` function of Plotly R.

```{r}
# reusable function for creating annotation object
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, y = 1,
    ax = 0, ay = 0,
    xref = "paper", yref = "paper", 
    align = "center",
    font = list(family = "serif", size = 15, color = "white"),
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  )
}

# reusable function for axis formatting
axis <- function(txt) {
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  )
}

ternaryAxes <- list(
  aaxis = axis("Young"), 
  baxis = axis("Active"), 
  caxis = axis("Old")
)

# Initiating a plotly visualization 
plot_ly(
  agpop_mutated, 
  a = ~YOUNG, 
  b = ~ACTIVE, 
  c = ~OLD, 
  color = I("black"), 
  type = "scatterternary"
) %>%
  layout(
    annotations = label("Ternary Markers"), 
    ternary = ternaryAxes
  )
```

# Part Two: **Visual Correlation Analysis**

# 6.1 Overview

The correlation coefficient is a widely used statistic for quantifying the nature and strength of the relationship between two variables. It ranges from -1.0 to 1.0, where 1 indicates a perfect positive linear relationship, -1 indicates a perfect negative linear relationship, and 0 indicates no linear relationship at all.

In the context of multivariate data, correlation coefficients for pairwise comparisons are typically presented in a format known as a correlation matrix or scatterplot matrix. Calculating a correlation matrix serves three primary purposes:

1. To systematically uncover relationships between pairs of high-dimensional variables.
2. To provide a basis for further analysis, such as exploratory factor analysis, confirmatory factor analysis, structural equation modeling, and linear regression, especially for handling missing values on a pairwise basis.
3. To serve as a diagnostic tool in assessing the reliability of other analyses. For instance, in linear regression, a high correlation among variables may indicate that the estimates of the regression model could be unreliable.

For large datasets, both in terms of the number of observations and variables, a visual tool called a [Corrgram](http://www.datavis.ca/papers/corrgram.pdf) is often employed to explore and analyse the structure and patterns of relationships among variables. This tool is designed with two key strategies in mind: visualising the magnitude and direction of correlations, and rearranging variables in the correlation matrix to group similar variables together, which enhances the visual interpretation.

In this practical session, you will learn how to visualise a correlation matrix using R. The tutorial is divided into three main parts: first, creating a correlation matrix with the [pairs()](https://www.rdocumentation.org/packages/graphics/versions/3.6.0/topics/pairs) function from R Graphics; second, plotting a Corrgram using the `corrplot` package in R; and finally, creating an interactive correlation matrix using Plotly R.

# 6.2 Installing and Launching R Packages
Before beginning, we will need to create a new Quarto document, making sure to stick with the default HTML authoring format.

Following that, utilise the code snippet provided below to install and initiate the `corrplot`, `ggpubr`, `plotly`, and `tidyverse` packages in RStudio.

```{r}
pacman::p_load(corrplot, ggstatsplot, tidyverse)
```

# 6.3 Importing and Preparing The Data Set
During this practical session, we will employ the [Wine Quality Data Set](https://archive.ics.uci.edu/ml/datasets/wine+quality) from the UCI Machine Learning Repository. This dataset contains 13 variables and spans 6497 observations. Specifically for this exercise, the data for red and white wines has been amalgamated into a single file, named `wine_quality`, which is available in CSV format.

## 6.3.1 Importing Data

First, let us import the data into R by using read_csv() of readr package.

```{r}
wine <- read_csv("data/wine_quality.csv")
```

Notice that beside quality and type, the rest of the variables are numerical and continuous data type.

# 6.4 Building Correlation Matrix: pairs() method

There are more than one way to build scatterplot matrix with R. In this section, you will learn how to create a scatterplot matrix by using the pairs function of R Graphics.

Before you continue to the next step, you should read the syntax description of [pairs](https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/pairs.html) function.

## 6.4.1 Building a basic correlation matrix
Figure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.
```{r}
pairs(wine[,1:11])
```

The required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.
```{r}
pairs(wine[,2:12])
```

## 6.4.2 Drawing the lower corner
pairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.

To show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.

```{r}
pairs(wine[,2:12], upper.panel = NULL)
```

Similarly, you can display the upper half of the correlation matrix by using the code chun below.

```{r}
pairs(wine[,2:12], lower.panel = NULL)
```

## 6.4.3 Including with correlation coefficients
To show the correlation coefficient of each pair of variables instead of a scatter plot, [panel.cor](https://www.rdocumentation.org/packages/xcms/versions/1.48.0/topics/panel.cor) function will be used. This will also show higher correlations in a larger font.

Donâ€™t worry about the details for now-just type this code into your R session or script. Letâ€™s have more fun way to display the correlation matrix.

```{r}
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}

pairs(wine[,2:12], 
      upper.panel = panel.cor)
```
