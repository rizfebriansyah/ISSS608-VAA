---
title: "Hands-on Exercise 1"
author: "Rizqi Febriansyah"
---

# 1.1 Learning Outcome

This chapter introduces fundamental principles and key elements of ggplot2. We will simultaneously acquire practical skills in utilising these elements to generate statistical graphics, following the principles of the Layered Grammar of Graphics. By the conclusion of this chapter, we will have the ability to employ ggplot2's essential graphical components to craft sophisticated and functional statistical visuals.

# 1.2 Getting Started

## 1.2.1 Install and launching R packages

The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(tidyverse)
```

## 1.2.2 Importing the data

We bring exam_data.csv into the R environment using the read.csv() function and then assign it to the variable exam_data.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

In R, the conventional format for creating objects and assignment statements is as follows:

```{r}
#| eval: false
object_name <- value
```

We can use glimpse( ) and summary( ) to quickly inspect exam_data.

```{r}
glimpse(exam_data)
```

```{r}
summary(exam_data)
```

# 1.3 Introducing ggplot

ggplot2 is an R package that facilitates the generation of data-driven graphics, leveraging the principles of The Grammar of Graphics. It is an integral component of the tidyverse family, specifically crafted for visual exploration and effective communication of data insights.

For further details, please refer to the ggplot2 documentation available at the following link: [ggplot2 Link](https://ggplot2.tidyverse.org/)

## 1.31 R Graphics vs ggplot

Let's examine the differences in how R Graphics, encompassing the fundamental graphical functions of Base R, and ggplot2, create a basic histogram. :::panel tabset \# Base R

```{r}
hist(exam_data$MATHS, col = '#5e82c9')
```

#ggplot

```{r}
ggplot(data=exam_data, aes(x = MATHS)) +
  geom_histogram(bins=10, 
                 boundary = 100,
                 color="black", 
                 fill='#5e82c9') +
  ggtitle("Distribution of Maths scores")
```

While the code is more straightforward with R Graphics, [Hadley Wickham](http://varianceexplained.org/r/teach_ggplot2_to_beginners/#comment-1745406157) emphasises that the valuable skills gained from ggplot2 extend beyond mere plotting syntax. Instead, they involve adopting a potent mindset for visualization, considering it as a method to map between variables and the visual characteristics of geometric objects that are perceptible.

## Plotting a simple bar chart

```{r}
ggplot(data = exam_data, 
      aes(x = RACE)) +
  geom_bar()
```

# 1.4 Grammar of Graphics

The Grammar of Graphics is a comprehensive framework for data visualisation that deconstructs graphs into semantic components like scales and layers. It establishes guidelines for organising mathematical and aesthetic elements into a coherent graph.

Two key principles within the Grammar of Graphics are:

1.  **Graphics comprise distinct layers of grammatical elements.**
2.  **Achieving meaningful plots through aesthetic mapping.**

A robust grammar of graphics enables us to comprehend the structure of intricate visuals and unveil unexpected connections among seemingly disparate graphics (Cox 1978).

The figure below illustrates the seven grammars utilised in ggplot2.

A short description of each building block are as follows:

-   Data: The dataset being plotted.

-   Aesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.

-   Geometrics: The visual elements used for our data, such as point, bar or line.

-   Facets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).

-   Statistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).

-   Coordinate systems define the plane on which data are mapped on the graphic.

-   Themes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.

# 1.5 Essential Grammatical Elements in ggplot2: data
Let us call the ggplot( ) function using the code chunk below.

```{r}
ggplot(data=exam_data)
```

# 1.6 Essential Grammatical Elements in ggplot2: Aesthetic mappings
The aesthetic mappings take attributes of the data and use them to influence visual characteristics, such as position, colour, size, shape or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.

All aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)

The code below adds the aesthetic element into the plot.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS))
```       

# 1.7 1.7 Essential Grammatical Elements in ggplot2: geom
Geometric objects refer to the actual marks placed on the plot. A plot must contain at least one geometric object in order to have an output. There’s no limit on the number of geometric objects we can add.

+ is used to add additional geometric objects to the code chunk. The image below shows examples of some geometric objects.

For a complete list, please refer to [here](https://ggplot2.tidyverse.org/reference/#section-layer-geoms).

## 1.7.1 Geometric Objects: geom_bar()
The code chunk below plots a bar chart by using geom_bar( ).

aes(x=RACE) defines “RACE” as the x-axis.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

## 1.7.2 Geometric Objects: geom_dotplot()
In a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.

Below, we use geom_dotplot() to plot a dot plot of math scores.

```{r}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(dotsize = 0.5)
```
CAUTIOB

We insert 2 additional arguments in geom_dotplot()

- ‘binwidth’ which refers to group ranges

- ‘dotsize’ which scales the size of the dots.

The function scale_y_continuous() is also added to turn off the y-axis by setting it to NULL.

```{r} 
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth=2.5,         
               dotsize = 0.5,
               color="black", 
               fill='#5e82c9') +
  scale_y_continuous(NULL,           
                     breaks = NULL)  
```